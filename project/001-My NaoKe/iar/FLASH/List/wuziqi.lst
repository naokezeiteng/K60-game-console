###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        14/May/2019  18:35:39
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\2019.IAR\project\001-My NaoKe\app\wuziqi.c
#    Command line =  
#        "D:\2019.IAR\project\001-My NaoKe\app\wuziqi.c" -D LPLD_K60 -lCN
#        "D:\2019.IAR\project\001-My NaoKe\iar\FLASH\List\" -lB
#        "D:\2019.IAR\project\001-My NaoKe\iar\FLASH\List\" -o
#        "D:\2019.IAR\project\001-My NaoKe\iar\FLASH\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "D:\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\app\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\CPU\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\common\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\LPLD\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\LPLD\HW\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\LPLD\DEV\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\FatFs\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\FatFs\option\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\common\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\driver\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\descriptor\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\class\" -Ol -I
#        "D:\Embedded Workbench 7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  D:\2019.IAR\project\001-My NaoKe\iar\FLASH\List\wuziqi.lst
#    Object file  =  D:\2019.IAR\project\001-My NaoKe\iar\FLASH\Obj\wuziqi.o
#
###############################################################################

D:\2019.IAR\project\001-My NaoKe\app\wuziqi.c
      1          #include "common.h"
      2          #include "LQ12864.h"
      3          #include "wuziqi.h"
      4          #include "yingjian.h"
      5          
      6          extern uint16 gameing,gamestart;
      7          extern uint8 board[8][8];
      8          extern int8 codn_x,codn_y;

   \                                 In section .data, align 1
      9          uint8 player = 1;
   \                     player:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 1
     10          uint8 rou = 0;
   \                     rou:
   \   00000000                      DS8 1
     11          

   \                                 In section .text, align 2, keep-with-next
     12          void wuziqi(void){
   \                     wuziqi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     13            for(int n=0;n<8;n++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE016             B.N      ??wuziqi_0
     14            {
     15              for(int m=0;m<5;m++){
     16                LCD_P14x16Ch(30+m*14,n,m+33);
   \                     ??wuziqi_1: (+1)
   \   00000006   0xF115 0x0221      ADDS     R2,R5,#+33
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x0021             MOVS     R1,R4
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x200E             MOVS     R0,#+14
   \   00000012   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000016   0x301E             ADDS     R0,R0,#+30
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      BL       LCD_P14x16Ch
     17              }
   \   0000001E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??wuziqi_2: (+1)
   \   00000020   0x2D05             CMP      R5,#+5
   \   00000022   0xDBF0             BLT.N    ??wuziqi_1
     18              delay(7000);
   \   00000024   0xF641 0x3058      MOVW     R0,#+7000
   \   00000028   0x.... 0x....      BL       delay
     19              LCD_Fill(0);
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       LCD_Fill
   \   00000032   0x1C64             ADDS     R4,R4,#+1
   \                     ??wuziqi_0: (+1)
   \   00000034   0x2C08             CMP      R4,#+8
   \   00000036   0xDA01             BGE.N    ??wuziqi_3
   \   00000038   0x2500             MOVS     R5,#+0
   \   0000003A   0xE7F1             B.N      ??wuziqi_2
     20            }  
     21            gameing=1;
   \                     ??wuziqi_3: (+1)
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00000042   0x8008             STRH     R0,[R1, #+0]
     22            /*pwm_init(50);                            背景音乐
     23            LPLD_FTM_PWM_ChangeDuty(FTM0,FTM_Ch0, 0);*/
     24            LCD_P8x16Str(70,3,"PLAYER1");
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable3_1
   \   00000048   0x2103             MOVS     R1,#+3
   \   0000004A   0x2046             MOVS     R0,#+70
   \   0000004C   0x.... 0x....      BL       LCD_P8x16Str
     25            LCD_P8x16Str(74,1,"GoBang");
   \   00000050   0x.... 0x....      LDR.W    R2,??DataTable3_2
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x204A             MOVS     R0,#+74
   \   00000058   0x.... 0x....      BL       LCD_P8x16Str
   \   0000005C   0xE001             B.N      ??wuziqi_4
     26            while(gamestart){
     27            	key_scan();}
   \                     ??wuziqi_5: (+1)
   \   0000005E   0x.... 0x....      BL       key_scan
   \                     ??wuziqi_4: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable3_3
   \   00000066   0x8800             LDRH     R0,[R0, #+0]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD1F8             BNE.N    ??wuziqi_5
     28            	player=1;
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00000072   0x7008             STRB     R0,[R1, #+0]
     29            	rou=0;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   0000007A   0x7008             STRB     R0,[R1, #+0]
     30            	codn_x=codn_y=0;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00000082   0x7008             STRB     R0,[R1, #+0]
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable3_6
   \   00000088   0x7800             LDRB     R0,[R0, #+0]
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   0000008E   0x7008             STRB     R0,[R1, #+0]
     31              memset(board,0,sizeof(board));
   \   00000090   0x2240             MOVS     R2,#+64
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable3_8
   \   00000098   0x.... 0x....      BL       memset
     32            	gameing=gamestart=0;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   000000A2   0x8008             STRH     R0,[R1, #+0]
   \   000000A4   0x....             LDR.N    R0,??DataTable3_3
   \   000000A6   0x8800             LDRH     R0,[R0, #+0]
   \   000000A8   0x....             LDR.N    R1,??DataTable3
   \   000000AA   0x8008             STRH     R0,[R1, #+0]
     33          }
   \   000000AC   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void show_win(void)
     36          {
   \                     show_win: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     37            gameing=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable3
   \   00000006   0x8008             STRH     R0,[R1, #+0]
     38            LCD_CLS();
   \   00000008   0x.... 0x....      BL       LCD_CLS
     39            chess_board();
   \   0000000C   0x.... 0x....      BL       chess_board
     40            if(player == 2)
   \   00000010   0x....             LDR.N    R0,??DataTable3_4
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD105             BNE.N    ??show_win_0
     41              LCD_P6x8Str(84,7,"PLAYER1");
   \   00000018   0x....             LDR.N    R2,??DataTable3_1
   \   0000001A   0x2107             MOVS     R1,#+7
   \   0000001C   0x2054             MOVS     R0,#+84
   \   0000001E   0x.... 0x....      BL       LCD_P6x8Str
   \   00000022   0xE008             B.N      ??show_win_1
     42            else if(player == 1)
   \                     ??show_win_0: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable3_4
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xD104             BNE.N    ??show_win_1
     43              LCD_P6x8Str(84,7,"PLAYER2");
   \   0000002C   0x....             LDR.N    R2,??DataTable3_9
   \   0000002E   0x2107             MOVS     R1,#+7
   \   00000030   0x2054             MOVS     R0,#+84
   \   00000032   0x.... 0x....      BL       LCD_P6x8Str
     44          }
   \                     ??show_win_1: (+1)
   \   00000036   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     45          void key_scan(void)
     46          {
   \                     key_scan: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     47          
     48              if(LPLD_ADC_Get(ADC0, DAD1)>3000)
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR.N    R0,??DataTable3_10  ;; 0x4003b000
   \   00000006   0x.... 0x....      BL       LPLD_ADC_Get
   \   0000000A   0xF640 0x31B9      MOVW     R1,#+3001
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xDB19             BLT.N    ??key_scan_0
     49              {
     50                delay(8000);
   \   00000012   0xF44F 0x50FA      MOV      R0,#+8000
   \   00000016   0x.... 0x....      BL       delay
     51                if(LPLD_ADC_Get(ADC0, DAD1)>3000)codn_x+=8;
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x....             LDR.N    R0,??DataTable3_10  ;; 0x4003b000
   \   0000001E   0x.... 0x....      BL       LPLD_ADC_Get
   \   00000022   0xF640 0x31B9      MOVW     R1,#+3001
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xDB04             BLT.N    ??key_scan_1
   \   0000002A   0x....             LDR.N    R0,??DataTable3_7
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x3008             ADDS     R0,R0,#+8
   \   00000030   0x....             LDR.N    R1,??DataTable3_7
   \   00000032   0x7008             STRB     R0,[R1, #+0]
     52                if(codn_x > 56) codn_x = 0;
   \                     ??key_scan_1: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable3_7
   \   00000036   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000003A   0x2839             CMP      R0,#+57
   \   0000003C   0xDB22             BLT.N    ??key_scan_2
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable3_7
   \   00000042   0x7008             STRB     R0,[R1, #+0]
   \   00000044   0xE01E             B.N      ??key_scan_2
     53              }
     54              else if(LPLD_ADC_Get(ADC0, DAD1) < 1000)
   \                     ??key_scan_0: (+1)
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x....             LDR.N    R0,??DataTable3_10  ;; 0x4003b000
   \   0000004A   0x.... 0x....      BL       LPLD_ADC_Get
   \   0000004E   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000052   0xDA17             BGE.N    ??key_scan_2
     55              {
     56                delay(8000);
   \   00000054   0xF44F 0x50FA      MOV      R0,#+8000
   \   00000058   0x.... 0x....      BL       delay
     57                if(LPLD_ADC_Get(ADC0, DAD1)< 1000)codn_x-=8;
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x....             LDR.N    R0,??DataTable3_10  ;; 0x4003b000
   \   00000060   0x.... 0x....      BL       LPLD_ADC_Get
   \   00000064   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000068   0xDA04             BGE.N    ??key_scan_3
   \   0000006A   0x....             LDR.N    R0,??DataTable3_7
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x3808             SUBS     R0,R0,#+8
   \   00000070   0x....             LDR.N    R1,??DataTable3_7
   \   00000072   0x7008             STRB     R0,[R1, #+0]
     58                if(codn_x < 0) codn_x = 56;
   \                     ??key_scan_3: (+1)
   \   00000074   0x....             LDR.N    R0,??DataTable3_7
   \   00000076   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD502             BPL.N    ??key_scan_2
   \   0000007E   0x2038             MOVS     R0,#+56
   \   00000080   0x....             LDR.N    R1,??DataTable3_7
   \   00000082   0x7008             STRB     R0,[R1, #+0]
     59              }
     60              if(LPLD_ADC_Get(ADC0, DAD3)>3000)
   \                     ??key_scan_2: (+1)
   \   00000084   0x2103             MOVS     R1,#+3
   \   00000086   0x....             LDR.N    R0,??DataTable3_10  ;; 0x4003b000
   \   00000088   0x.... 0x....      BL       LPLD_ADC_Get
   \   0000008C   0xF640 0x31B9      MOVW     R1,#+3001
   \   00000090   0x4288             CMP      R0,R1
   \   00000092   0xDB19             BLT.N    ??key_scan_4
     61              {
     62                delay(8000);
   \   00000094   0xF44F 0x50FA      MOV      R0,#+8000
   \   00000098   0x.... 0x....      BL       delay
     63                if(LPLD_ADC_Get(ADC0, DAD3)>3000)codn_y++;
   \   0000009C   0x2103             MOVS     R1,#+3
   \   0000009E   0x....             LDR.N    R0,??DataTable3_10  ;; 0x4003b000
   \   000000A0   0x.... 0x....      BL       LPLD_ADC_Get
   \   000000A4   0xF640 0x31B9      MOVW     R1,#+3001
   \   000000A8   0x4288             CMP      R0,R1
   \   000000AA   0xDB04             BLT.N    ??key_scan_5
   \   000000AC   0x....             LDR.N    R0,??DataTable3_6
   \   000000AE   0x7800             LDRB     R0,[R0, #+0]
   \   000000B0   0x1C40             ADDS     R0,R0,#+1
   \   000000B2   0x....             LDR.N    R1,??DataTable3_6
   \   000000B4   0x7008             STRB     R0,[R1, #+0]
     64                if(codn_y > 7) codn_y = 0;
   \                     ??key_scan_5: (+1)
   \   000000B6   0x....             LDR.N    R0,??DataTable3_6
   \   000000B8   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   000000BC   0x2808             CMP      R0,#+8
   \   000000BE   0xDB22             BLT.N    ??key_scan_6
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0x....             LDR.N    R1,??DataTable3_6
   \   000000C4   0x7008             STRB     R0,[R1, #+0]
   \   000000C6   0xE01E             B.N      ??key_scan_6
     65              }
     66              else if(LPLD_ADC_Get(ADC0, DAD3) < 1000)
   \                     ??key_scan_4: (+1)
   \   000000C8   0x2103             MOVS     R1,#+3
   \   000000CA   0x....             LDR.N    R0,??DataTable3_10  ;; 0x4003b000
   \   000000CC   0x.... 0x....      BL       LPLD_ADC_Get
   \   000000D0   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000000D4   0xDA17             BGE.N    ??key_scan_6
     67              {
     68                delay(8000);
   \   000000D6   0xF44F 0x50FA      MOV      R0,#+8000
   \   000000DA   0x.... 0x....      BL       delay
     69                if(LPLD_ADC_Get(ADC0, DAD3)< 1000)codn_y--;
   \   000000DE   0x2103             MOVS     R1,#+3
   \   000000E0   0x....             LDR.N    R0,??DataTable3_10  ;; 0x4003b000
   \   000000E2   0x.... 0x....      BL       LPLD_ADC_Get
   \   000000E6   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000000EA   0xDA04             BGE.N    ??key_scan_7
   \   000000EC   0x....             LDR.N    R0,??DataTable3_6
   \   000000EE   0x7800             LDRB     R0,[R0, #+0]
   \   000000F0   0x1E40             SUBS     R0,R0,#+1
   \   000000F2   0x....             LDR.N    R1,??DataTable3_6
   \   000000F4   0x7008             STRB     R0,[R1, #+0]
     70                if(codn_y < 0) codn_y = 7;
   \                     ??key_scan_7: (+1)
   \   000000F6   0x....             LDR.N    R0,??DataTable3_6
   \   000000F8   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   000000FC   0x2800             CMP      R0,#+0
   \   000000FE   0xD502             BPL.N    ??key_scan_6
   \   00000100   0x2007             MOVS     R0,#+7
   \   00000102   0x....             LDR.N    R1,??DataTable3_6
   \   00000104   0x7008             STRB     R0,[R1, #+0]
     71              }
     72          }
   \                     ??key_scan_6: (+1)
   \   00000106   0xBD01             POP      {R0,PC}          ;; return
     73          

   \                                 In section .text, align 2, keep-with-next
     74          uint8 board_scan(int num)
     75          {
   \                     board_scan: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     76            uint8 count = 0;
   \   00000002   0x2100             MOVS     R1,#+0
     77            
     78            for(int i = 0; i < 8;i++)   //行扫描
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0xE000             B.N      ??board_scan_0
   \                     ??board_scan_1: (+1)
   \   00000008   0x1C52             ADDS     R2,R2,#+1
   \                     ??board_scan_0: (+1)
   \   0000000A   0x2A08             CMP      R2,#+8
   \   0000000C   0xDA1B             BGE.N    ??board_scan_2
     79            { 
     80              for(int j = 0; j < 7;j++)
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0xE000             B.N      ??board_scan_3
   \                     ??board_scan_4: (+1)
   \   00000012   0x1C5B             ADDS     R3,R3,#+1
   \                     ??board_scan_3: (+1)
   \   00000014   0x2B07             CMP      R3,#+7
   \   00000016   0xDAF7             BGE.N    ??board_scan_1
     81              { 
     82                uint8 tmp = board[i][j];
   \   00000018   0x....             LDR.N    R4,??DataTable3_8
   \   0000001A   0xEB14 0x04C2      ADDS     R4,R4,R2, LSL #+3
   \   0000001E   0x5D1C             LDRB     R4,[R3, R4]
     83                if(tmp != board[i][j+1] || tmp ==0){count = 0;}
   \   00000020   0x....             LDR.N    R5,??DataTable3_8
   \   00000022   0xEB15 0x05C2      ADDS     R5,R5,R2, LSL #+3
   \   00000026   0x195D             ADDS     R5,R3,R5
   \   00000028   0x786D             LDRB     R5,[R5, #+1]
   \   0000002A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0x42AC             CMP      R4,R5
   \   0000002E   0xD102             BNE.N    ??board_scan_5
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x2C00             CMP      R4,#+0
   \   00000034   0xD101             BNE.N    ??board_scan_6
   \                     ??board_scan_5: (+1)
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0xE000             B.N      ??board_scan_7
     84                else count++;
   \                     ??board_scan_6: (+1)
   \   0000003A   0x1C49             ADDS     R1,R1,#+1
     85                if(count > num)return 1;
   \                     ??board_scan_7: (+1)
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xDAE7             BGE.N    ??board_scan_4
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE0B0             B.N      ??board_scan_8
     86              }
     87            }
     88            for(int i = 0; i < 8;i++)  //列扫描
   \                     ??board_scan_2: (+1)
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0xE000             B.N      ??board_scan_9
   \                     ??board_scan_10: (+1)
   \   0000004A   0x1C52             ADDS     R2,R2,#+1
   \                     ??board_scan_9: (+1)
   \   0000004C   0x2A08             CMP      R2,#+8
   \   0000004E   0xDA1B             BGE.N    ??board_scan_11
     89            { 
     90              for(int j = 0; j < 7;j++)
   \   00000050   0x2300             MOVS     R3,#+0
   \   00000052   0xE000             B.N      ??board_scan_12
   \                     ??board_scan_13: (+1)
   \   00000054   0x1C5B             ADDS     R3,R3,#+1
   \                     ??board_scan_12: (+1)
   \   00000056   0x2B07             CMP      R3,#+7
   \   00000058   0xDAF7             BGE.N    ??board_scan_10
     91              { 
     92                uint8 tmp = board[j][i];
   \   0000005A   0x....             LDR.N    R4,??DataTable3_8
   \   0000005C   0xEB14 0x04C3      ADDS     R4,R4,R3, LSL #+3
   \   00000060   0x5D14             LDRB     R4,[R2, R4]
     93                if(tmp != board[j+1][i] || tmp ==0)count = 0;
   \   00000062   0x....             LDR.N    R5,??DataTable3_8
   \   00000064   0xEB15 0x05C3      ADDS     R5,R5,R3, LSL #+3
   \   00000068   0x1955             ADDS     R5,R2,R5
   \   0000006A   0x7A2D             LDRB     R5,[R5, #+8]
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0x42AC             CMP      R4,R5
   \   00000070   0xD102             BNE.N    ??board_scan_14
   \   00000072   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000074   0x2C00             CMP      R4,#+0
   \   00000076   0xD101             BNE.N    ??board_scan_15
   \                     ??board_scan_14: (+1)
   \   00000078   0x2100             MOVS     R1,#+0
   \   0000007A   0xE000             B.N      ??board_scan_16
     94                else count++;
   \                     ??board_scan_15: (+1)
   \   0000007C   0x1C49             ADDS     R1,R1,#+1
     95                if(count > num)return 1;
   \                     ??board_scan_16: (+1)
   \   0000007E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000080   0x4288             CMP      R0,R1
   \   00000082   0xDAE7             BGE.N    ??board_scan_13
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0xE08F             B.N      ??board_scan_8
     96              }
     97            }
     98            
     99            for(int i = 0; i < 4;i++)
   \                     ??board_scan_11: (+1)
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0xE000             B.N      ??board_scan_17
   \                     ??board_scan_18: (+1)
   \   0000008C   0x1C40             ADDS     R0,R0,#+1
   \                     ??board_scan_17: (+1)
   \   0000008E   0x2804             CMP      R0,#+4
   \   00000090   0xDA1F             BGE.N    ??board_scan_19
    100            { 
    101              int a = i;
   \   00000092   0x0002             MOVS     R2,R0
    102              for(int j = 0; j < 8 - i;j++)
   \   00000094   0x2300             MOVS     R3,#+0
   \   00000096   0xE001             B.N      ??board_scan_20
    103              { 
    104                uint8 tmp = board[a][j];
    105                if(tmp != board[a+1][j+1] || tmp ==0)count = 0;
    106                else {count++;}
    107                if(count > 3)return 1;
    108                a++;
   \                     ??board_scan_21: (+1)
   \   00000098   0x1C52             ADDS     R2,R2,#+1
   \   0000009A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??board_scan_20: (+1)
   \   0000009C   0xF1D0 0x0408      RSBS     R4,R0,#+8
   \   000000A0   0x42A3             CMP      R3,R4
   \   000000A2   0xDAF3             BGE.N    ??board_scan_18
   \   000000A4   0x....             LDR.N    R4,??DataTable3_8
   \   000000A6   0xEB14 0x04C2      ADDS     R4,R4,R2, LSL #+3
   \   000000AA   0x5D1C             LDRB     R4,[R3, R4]
   \   000000AC   0x....             LDR.N    R5,??DataTable3_8
   \   000000AE   0xEB15 0x05C2      ADDS     R5,R5,R2, LSL #+3
   \   000000B2   0x195D             ADDS     R5,R3,R5
   \   000000B4   0x7A6D             LDRB     R5,[R5, #+9]
   \   000000B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B8   0x42AC             CMP      R4,R5
   \   000000BA   0xD102             BNE.N    ??board_scan_22
   \   000000BC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BE   0x2C00             CMP      R4,#+0
   \   000000C0   0xD101             BNE.N    ??board_scan_23
   \                     ??board_scan_22: (+1)
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0xE000             B.N      ??board_scan_24
   \                     ??board_scan_23: (+1)
   \   000000C6   0x1C49             ADDS     R1,R1,#+1
   \                     ??board_scan_24: (+1)
   \   000000C8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000CA   0x2904             CMP      R1,#+4
   \   000000CC   0xDBE4             BLT.N    ??board_scan_21
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0xE06A             B.N      ??board_scan_8
    109              }
    110            }
    111            
    112            for(int i = 0; i<4;i++)//斜方向下遍历次数3
   \                     ??board_scan_19: (+1)
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0xE000             B.N      ??board_scan_25
   \                     ??board_scan_26: (+1)
   \   000000D6   0x1C40             ADDS     R0,R0,#+1
   \                     ??board_scan_25: (+1)
   \   000000D8   0x2804             CMP      R0,#+4
   \   000000DA   0xDA1E             BGE.N    ??board_scan_27
    113            {
    114              int a = 0;
   \   000000DC   0x2200             MOVS     R2,#+0
    115              for(int j = 4-i;j < 8;j++)//斜线中遍历次数与i有关 j4i0 5 j3i1 6
   \   000000DE   0xF1D0 0x0304      RSBS     R3,R0,#+4
   \   000000E2   0xE001             B.N      ??board_scan_28
    116              {
    117                uint8 tmp = board[a][j];
    118                if(tmp != board[a+1][j+1] || tmp ==0)count = 0;
    119                else {count++;}
    120                if(count > 3)return 1;
    121                a++;
   \                     ??board_scan_29: (+1)
   \   000000E4   0x1C52             ADDS     R2,R2,#+1
   \   000000E6   0x1C5B             ADDS     R3,R3,#+1
   \                     ??board_scan_28: (+1)
   \   000000E8   0x2B08             CMP      R3,#+8
   \   000000EA   0xDAF4             BGE.N    ??board_scan_26
   \   000000EC   0x....             LDR.N    R4,??DataTable3_8
   \   000000EE   0xEB14 0x04C2      ADDS     R4,R4,R2, LSL #+3
   \   000000F2   0x5D1C             LDRB     R4,[R3, R4]
   \   000000F4   0x....             LDR.N    R5,??DataTable3_8
   \   000000F6   0xEB15 0x05C2      ADDS     R5,R5,R2, LSL #+3
   \   000000FA   0x195D             ADDS     R5,R3,R5
   \   000000FC   0x7A6D             LDRB     R5,[R5, #+9]
   \   000000FE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000100   0x42AC             CMP      R4,R5
   \   00000102   0xD102             BNE.N    ??board_scan_30
   \   00000104   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000106   0x2C00             CMP      R4,#+0
   \   00000108   0xD101             BNE.N    ??board_scan_31
   \                     ??board_scan_30: (+1)
   \   0000010A   0x2100             MOVS     R1,#+0
   \   0000010C   0xE000             B.N      ??board_scan_32
   \                     ??board_scan_31: (+1)
   \   0000010E   0x1C49             ADDS     R1,R1,#+1
   \                     ??board_scan_32: (+1)
   \   00000110   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000112   0x2904             CMP      R1,#+4
   \   00000114   0xDBE6             BLT.N    ??board_scan_29
   \   00000116   0x2001             MOVS     R0,#+1
   \   00000118   0xE046             B.N      ??board_scan_8
    122              }
    123            }
    124             
    125            for(int i = 0; i<4;i++)//斜方向下遍历次数4
   \                     ??board_scan_27: (+1)
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0xE000             B.N      ??board_scan_33
   \                     ??board_scan_34: (+1)
   \   0000011E   0x1C40             ADDS     R0,R0,#+1
   \                     ??board_scan_33: (+1)
   \   00000120   0x2804             CMP      R0,#+4
   \   00000122   0xDA1D             BGE.N    ??board_scan_35
    126            {
    127              int a = i;
   \   00000124   0x0002             MOVS     R2,R0
    128              for(int j = 7;j > i;j--)//
   \   00000126   0x2307             MOVS     R3,#+7
   \   00000128   0xE001             B.N      ??board_scan_36
    129              {
    130                uint8 tmp = board[a][j];
    131                if(tmp != board[a+1][j-1] || tmp ==0)count = 0;
    132                else {count++;}
    133                if(count > 3)return 1;
    134                a++;
   \                     ??board_scan_37: (+1)
   \   0000012A   0x1C52             ADDS     R2,R2,#+1
   \   0000012C   0x1E5B             SUBS     R3,R3,#+1
   \                     ??board_scan_36: (+1)
   \   0000012E   0x4298             CMP      R0,R3
   \   00000130   0xDAF5             BGE.N    ??board_scan_34
   \   00000132   0x....             LDR.N    R4,??DataTable3_8
   \   00000134   0xEB14 0x04C2      ADDS     R4,R4,R2, LSL #+3
   \   00000138   0x5D1C             LDRB     R4,[R3, R4]
   \   0000013A   0x....             LDR.N    R5,??DataTable3_8
   \   0000013C   0xEB15 0x05C2      ADDS     R5,R5,R2, LSL #+3
   \   00000140   0x195D             ADDS     R5,R3,R5
   \   00000142   0x79ED             LDRB     R5,[R5, #+7]
   \   00000144   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000146   0x42AC             CMP      R4,R5
   \   00000148   0xD102             BNE.N    ??board_scan_38
   \   0000014A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000014C   0x2C00             CMP      R4,#+0
   \   0000014E   0xD101             BNE.N    ??board_scan_39
   \                     ??board_scan_38: (+1)
   \   00000150   0x2100             MOVS     R1,#+0
   \   00000152   0xE000             B.N      ??board_scan_40
   \                     ??board_scan_39: (+1)
   \   00000154   0x1C49             ADDS     R1,R1,#+1
   \                     ??board_scan_40: (+1)
   \   00000156   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000158   0x2904             CMP      R1,#+4
   \   0000015A   0xDBE6             BLT.N    ??board_scan_37
   \   0000015C   0x2001             MOVS     R0,#+1
   \   0000015E   0xE023             B.N      ??board_scan_8
    135              }
    136            }
    137            
    138            for(int i = 0; i<3;i++)//斜方向下遍历次数4
   \                     ??board_scan_35: (+1)
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0xE000             B.N      ??board_scan_41
   \                     ??board_scan_42: (+1)
   \   00000164   0x1C40             ADDS     R0,R0,#+1
   \                     ??board_scan_41: (+1)
   \   00000166   0x2803             CMP      R0,#+3
   \   00000168   0xDA1D             BGE.N    ??board_scan_43
    139            {
    140              int a = 0;
   \   0000016A   0x2200             MOVS     R2,#+0
    141              for(int j = 4+i;j > 0;j--)//
   \   0000016C   0x1D03             ADDS     R3,R0,#+4
   \   0000016E   0xE001             B.N      ??board_scan_44
    142              {
    143                uint8 tmp = board[a][j];
    144                if(tmp != board[a+1][j-1] || tmp ==0)count = 0;
    145                else {count++;}
    146                if(count > 3)return 1;
    147                a++;
   \                     ??board_scan_45: (+1)
   \   00000170   0x1C52             ADDS     R2,R2,#+1
   \   00000172   0x1E5B             SUBS     R3,R3,#+1
   \                     ??board_scan_44: (+1)
   \   00000174   0x2B01             CMP      R3,#+1
   \   00000176   0xDBF5             BLT.N    ??board_scan_42
   \   00000178   0x....             LDR.N    R4,??DataTable3_8
   \   0000017A   0xEB14 0x04C2      ADDS     R4,R4,R2, LSL #+3
   \   0000017E   0x5D1C             LDRB     R4,[R3, R4]
   \   00000180   0x....             LDR.N    R5,??DataTable3_8
   \   00000182   0xEB15 0x05C2      ADDS     R5,R5,R2, LSL #+3
   \   00000186   0x195D             ADDS     R5,R3,R5
   \   00000188   0x79ED             LDRB     R5,[R5, #+7]
   \   0000018A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000018C   0x42AC             CMP      R4,R5
   \   0000018E   0xD102             BNE.N    ??board_scan_46
   \   00000190   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000192   0x2C00             CMP      R4,#+0
   \   00000194   0xD101             BNE.N    ??board_scan_47
   \                     ??board_scan_46: (+1)
   \   00000196   0x2100             MOVS     R1,#+0
   \   00000198   0xE000             B.N      ??board_scan_48
   \                     ??board_scan_47: (+1)
   \   0000019A   0x1C49             ADDS     R1,R1,#+1
   \                     ??board_scan_48: (+1)
   \   0000019C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000019E   0x2904             CMP      R1,#+4
   \   000001A0   0xDBE6             BLT.N    ??board_scan_45
   \   000001A2   0x2001             MOVS     R0,#+1
   \   000001A4   0xE000             B.N      ??board_scan_8
    148              }
    149            }  
    150            return 0;
   \                     ??board_scan_43: (+1)
   \   000001A6   0x2000             MOVS     R0,#+0
   \                     ??board_scan_8: (+1)
   \   000001A8   0xBC30             POP      {R4,R5}
   \   000001AA   0x4770             BX       LR               ;; return
    151          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     gameing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     gamestart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     player

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     rou

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     codn_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     codn_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     board

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x50 0x4C          DC8 "PLAYER1"
   \              0x41 0x59    
   \              0x45 0x52    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x47 0x6F          DC8 "GoBang"
   \              0x42 0x61    
   \              0x6E 0x67    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x50 0x4C          DC8 "PLAYER2"
   \              0x41 0x59    
   \              0x45 0x52    
   \              0x32 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   board_scan
       8   key_scan
         8   -> LPLD_ADC_Get
         8   -> delay
       8   show_win
         8   -> LCD_CLS
         8   -> LCD_P6x8Str
         8   -> chess_board
      16   wuziqi
        16   -> LCD_Fill
        16   -> LCD_P14x16Ch
        16   -> LCD_P8x16Str
        16   -> delay
        16   -> key_scan
        16   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       8  ?_0
       8  ?_1
       8  ?_2
     428  board_scan
     264  key_scan
       1  player
       1  rou
      56  show_win
     174  wuziqi

 
   1 byte  in section .bss
   1 byte  in section .data
  24 bytes in section .rodata
 966 bytes in section .text
 
 966 bytes of CODE  memory
  24 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none

///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM       14/May/2019  18:35:33
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  D:\2019.IAR\project\001-My NaoKe\app\LQ12864.c
//    Command line =  
//        "D:\2019.IAR\project\001-My NaoKe\app\LQ12864.c" -D LPLD_K60 -lCN
//        "D:\2019.IAR\project\001-My NaoKe\iar\FLASH\List\" -lB
//        "D:\2019.IAR\project\001-My NaoKe\iar\FLASH\List\" -o
//        "D:\2019.IAR\project\001-My NaoKe\iar\FLASH\Obj\" --no_cse
//        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
//        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
//        --dlib_config "D:\Embedded Workbench
//        7.0\arm\INC\c\DLib_Config_Normal.h" -I "D:\2019.IAR\project\001-My
//        NaoKe\iar\..\app\" -I "D:\2019.IAR\project\001-My
//        NaoKe\iar\..\..\..\lib\CPU\" -I "D:\2019.IAR\project\001-My
//        NaoKe\iar\..\..\..\lib\common\" -I "D:\2019.IAR\project\001-My
//        NaoKe\iar\..\..\..\lib\LPLD\" -I "D:\2019.IAR\project\001-My
//        NaoKe\iar\..\..\..\lib\LPLD\HW\" -I "D:\2019.IAR\project\001-My
//        NaoKe\iar\..\..\..\lib\LPLD\DEV\" -I "D:\2019.IAR\project\001-My
//        NaoKe\iar\..\..\..\lib\uCOS-II\Ports\" -I "D:\2019.IAR\project\001-My
//        NaoKe\iar\..\..\..\lib\uCOS-II\Source\" -I
//        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\FatFs\" -I
//        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\FatFs\option\" -I
//        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\common\" -I
//        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\driver\" -I
//        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\descriptor\"
//        -I "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\class\" -Ol
//        -I "D:\Embedded Workbench 7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
//    List file    =  D:\2019.IAR\project\001-My NaoKe\iar\FLASH\List\LQ12864.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN LPLD_GPIO_Output_b
        EXTERN buff_114
        EXTERN buff_86

        PUBLIC `C1`
        PUBLIC `C2`
        PUBLIC CB
        PUBLIC CB1
        PUBLIC E
        PUBLIC F128x64
        PUBLIC F128x641
        PUBLIC F14x16
        PUBLIC F16x8
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC F8x8
        PUBLIC LCD_CLS
        PUBLIC LCD_DLY_ms
        PUBLIC LCD_Fill
        PUBLIC LCD_HLFCLS
        PUBLIC LCD_Init
        PUBLIC LCD_P128x64Ch
        PUBLIC LCD_P128x64Ch1
        PUBLIC LCD_P14x16Ch
        PUBLIC LCD_P14x16Ch1
        PUBLIC LCD_P16x8Ch
        PUBLIC LCD_P6x8Str
        PUBLIC LCD_P8x16Str
        PUBLIC LCD_P8x8Ch
        PUBLIC LCD_Set_Pos
        PUBLIC LCD_WrCmd
        PUBLIC LCD_WrDat
        PUBLIC LCD_siping
        PUBLIC LCD_tuxing
        PUBLIC LCD_tuxing1
        PUBLIC LCD_tuxing2
        PUBLIC MY_LCD
        PUBLIC board
        PUBLIC chess_board
        PUBLIC chess_board1
        PUBLIC codn_x
        PUBLIC codn_y
        PUBLIC curCordBlink
        PUBLIC stmp
        PUBLIC tuxing
        PUBLIC tuxing1
        PUBLIC tuxing2

// D:\2019.IAR\project\001-My NaoKe\app\LQ12864.c
//    1 //#include "stc.h"
//    2 //#include "intrins.h"
//    3 #include "LQ12864.h"
//    4 #include "common.h"
//    5 #define LCD_PORT PTD
//    6 #define LCD_SCL 0
//    7 #define LCD_SDA 1
//    8 #define LCD_RST 2
//    9 #define LCD_DC  3
//   10 //sbit LCD_SCL=P1^0;
//   11 //sbit LCD_SDA=P1^1;
//   12 //sbit LCD_RST=P1^2;
//   13 //sbit LCD_DC =P1^3;
//   14 
//   15 #define XLevelL		0x00
//   16 #define XLevelH		0x10
//   17 #define XLevel		((XLevelH&0x0F)*16+XLevelL)
//   18 #define Max_Column	128
//   19 #define Max_Row		64
//   20 #define	Brightness	0xCF
//   21 #define X_WIDTH 128
//   22 #define Y_WIDTH 64
//   23 extern unsigned char buff_86[],buff_114[];
//   24 //======================================
//   25 
//   26 /*const unsigned char jianmianshang[] = {
//   27 };
//   28 const unsigned char jianmiantubiao[] = {
//   29 };*/

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   30 int stmp=0;
stmp:
        DS8 4

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   31 uint8 board[8][8]={0};
board:
        DS8 64

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   32 int8 codn_x = 0,codn_y = 0;
codn_x:
        DS8 1

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
codn_y:
        DS8 1
//   33 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   34 const unsigned char tuxing[] =
tuxing:
        DATA
        DC8 255, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
        DC8 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 255, 255, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
        DC8 1, 1, 1, 1, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 255
//   35 {
//   36 0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
//   37 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,
//   38 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   39 0x00,0x00,0x00,0xFF,//°üÎ§1
//   40 0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
//   41 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,
//   42 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   43 0x00,0x00,0x00,0xFF,//°üÎ§2
//   44 /* 0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x21,0x31,0xF9,0xFD,0x01,0x01,
//   45 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,
//   46 0x00,0x00,0x00,0x20,0x20,0x3F,0x3F,0x20,0x20,0x00,0x00,0x00,0x00,0x00,
//   47 0x00,0x00,0x00,0xFF,//°ë°üÎ§1 */
//   48 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   49 const unsigned char tuxing1[] =
tuxing1:
        DATA
        DC8 255, 128, 1, 0
//   50 {
//   51 0xFF,//²à±ß¿ò
//   52 0x80,//µ×±ß¿ò
//   53 0x01,//ÉÏ±ß¿ò
//   54 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   55 const unsigned char tuxing2[] =   //·Ö±æÂÊ32*32
tuxing2:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 112, 192, 128, 0, 252, 252, 0
        DC8 192, 224, 112, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 192, 240, 152, 140, 140, 12, 12, 12, 12, 12, 12, 12, 12, 140
        DC8 140, 184, 240, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255
        DC8 1, 1, 1, 7, 15, 12, 12, 12, 12, 12, 12, 15, 7, 1, 1, 1, 255, 255, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
        DC8 4, 4, 4, 4, 4, 4, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 224, 32
        DC8 56, 56, 96, 192, 128, 128, 128, 128, 248, 248, 128, 128, 128, 128
        DC8 128, 128, 248, 248, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 129, 129
        DC8 131, 134, 252, 252, 134, 131, 129, 129, 129, 129, 255, 255, 129
        DC8 129, 129, 129, 129, 129, 255, 255, 129, 129, 129, 0, 0, 0, 0, 0, 0
        DC8 0, 129, 129, 129, 129, 255, 255, 129, 129, 129, 129, 129, 129, 255
        DC8 255, 129, 129, 129, 129, 193, 225, 255, 255, 225, 193, 129, 0, 0, 0
        DC8 0, 0, 0, 0, 1, 1, 1, 1, 63, 63, 1, 1, 1, 1, 1, 1, 63, 63, 1, 1, 1
        DC8 1, 7, 7, 63, 63, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240
        DC8 248, 0, 0, 0, 240, 240, 0, 128, 0, 240, 240, 0, 0, 0, 248, 240, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 192, 199, 207, 192, 224
        DC8 224, 249, 126, 31, 15, 31, 126, 249, 224, 192, 192, 207, 199, 192
        DC8 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 31, 252, 248, 96, 0
        DC8 0, 128, 128, 128, 0, 0, 112, 248, 252, 31, 15, 7, 3, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 31, 31, 14, 15, 7, 3, 3, 7, 7, 15
        DC8 14, 31, 31, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 248, 12, 12, 12, 12
        DC8 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12
        DC8 12, 12, 12, 12, 12, 28, 248, 240, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 252, 252, 24, 24, 48, 112, 96, 192, 192, 128, 128, 0, 0, 0, 0
        DC8 0, 0, 0, 255, 255, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 63
        DC8 48, 24, 28, 12, 6, 6, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 15
        DC8 31, 56, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48
        DC8 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56, 31, 15, 0, 240, 248
        DC8 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248
        DC8 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248
        DC8 248, 240, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 0, 0, 255, 255, 255, 255, 231
        DC8 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231
        DC8 231, 231, 231, 231, 231, 231, 231, 231, 255, 255, 255, 255, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 65, 97, 113, 127, 127, 127, 127, 127, 127, 127, 127
        DC8 127, 127, 127, 127, 127, 113, 97, 65, 1, 1, 1, 1, 0, 0
//   56 {
//   57 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x70,0xC0,
//   58 0x80,0x00,0xFC,0xFC,0x00,0xC0,0xE0,0x70,0x18,0x00,0x00,0x00,0x00,0x00,
//   59 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xF0,
//   60 0x98,0x8C,0x8C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x8C,0x8C,0xB8,
//   61 0xF0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   62 0x00,0xFF,0xFF,0x01,0x01,0x01,0x07,0x0F,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,
//   63 0x0F,0x07,0x01,0x01,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   64 0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x04,0x04,0x04,0x04,0x04,0x04,0x04,
//   65 0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x07,0x07,0x00,0x00,0x00,
//   66 0x00,0x00,//ÍÆÏä×Ó
//   67 0x00,0x00,0x00,0x80,0x80,0xE0,0x20,0x38,0x38,0x60,0xC0,0x80,0x80,0x80,
//   68 0x80,0xF8,0xF8,0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0xF8,0x80,0x80,0x80,
//   69 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x81,0x83,0x86,0xFC,0xFC,0x86,
//   70 0x83,0x81,0x81,0x81,0x81,0xFF,0xFF,0x81,0x81,0x81,0x81,0x81,0x81,0xFF,
//   71 0xFF,0x81,0x81,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x81,0x81,
//   72 0x81,0xFF,0xFF,0x81,0x81,0x81,0x81,0x81,0x81,0xFF,0xFF,0x81,0x81,0x81,
//   73 0x81,0xC1,0xE1,0xFF,0xFF,0xE1,0xC1,0x81,0x00,0x00,0x00,0x00,0x00,0x00,
//   74 0x00,0x01,0x01,0x01,0x01,0x3F,0x3F,0x01,0x01,0x01,0x01,0x01,0x01,0x3F,
//   75 0x3F,0x01,0x01,0x01,0x01,0x07,0x07,0x3F,0x3F,0x07,0x03,0x01,0x00,0x00,
//   76 0x00,0x00,//Îå×ÓÆå
//   77 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF8,0x00,0x00,0x00,0xF0,
//   78 0xF0,0x00,0x80,0x00,0xF0,0xF0,0x00,0x00,0x00,0xF8,0xF0,0x00,0x00,0x00,
//   79 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC7,0xCF,
//   80 0xC0,0xE0,0xE0,0xF9,0x7E,0x1F,0x0F,0x1F,0x7E,0xF9,0xE0,0xC0,0xC0,0xCF,
//   81 0xC7,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   82 0x03,0x07,0x0F,0x1F,0xFC,0xF8,0x60,0x00,0x00,0x80,0x80,0x80,0x00,0x00,
//   83 0x70,0xF8,0xFC,0x1F,0x0F,0x07,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   84 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x1F,0x1F,0x0E,0x0F,0x07,0x03,
//   85 0x03,0x07,0x07,0x0F,0x0E,0x1F,0x1F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
//   86 0x00,0x00,//É¨À×
//   87 0x00,0xF0,0xF8,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,
//   88 0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,
//   89 0x0C,0x1C,0xF8,0xF0,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   90 0x00,0x00,0xFC,0xFC,0x18,0x18,0x30,0x70,0x60,0xC0,0xC0,0x80,0x80,0x00,
//   91 0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x00,0x00,
//   92 0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x30,0x18,0x1C,0x0C,0x06,0x06,
//   93 0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x0F,
//   94 0x1F,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
//   95 0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x38,
//   96 0x1F,0x0F,//ÊÓÆµ
//   97 0x00,0xF0,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
//   98 0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,
//   99 0xF8,0xF8,0xF0,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//  100 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//  101 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xE7,
//  102 0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,
//  103 0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
//  104 0x01,0x01,0x01,0x01,0x01,0x41,0x61,0x71,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,
//  105 0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x71,0x61,0x41,0x01,0x01,0x01,0x01,
//  106 0x00,0x00,//ÏµÍ³
//  107 };
//  108 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  109 const unsigned char CB1[8] =
CB1:
        DATA
        DC8 24, 24, 24, 255, 255, 24, 24, 24
//  110 {
//  111   0x18,0x18,0x18,0xFF,0xFF,0x18,0x18,0x18,//ÆåÅÌ
//  112 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  113 const unsigned char C1[8] =
`C1`:
        DATA
        DC8 0, 126, 126, 126, 126, 126, 126, 0
//  114 {
//  115   0x00,0x7E,0x7E,0x7E,0x7E,0x7E,0x7E,0x00,//Æì×Ó1 ÊµÐÄ
//  116 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  117 const unsigned char C2[8] =
`C2`:
        DATA
        DC8 0, 126, 66, 66, 66, 66, 126, 0
//  118 {
//  119   0x00,0x7E,0x42,0x42,0x42,0x42,0x7E,0x00,//Æì×Ó2
//  120 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  121 const unsigned char E[8] =
E:
        DATA
        DC8 24, 102, 66, 129, 129, 66, 102, 24
//  122 {
//  123   0x18,0x66,0x42,0x81,0x81,0x42,0x66,0x18,//¿Õ
//  124 };
//  125 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  126 const unsigned char F8x8[] = {
F8x8:
        DATA
        DC8 255, 129, 129, 129, 129, 255, 0, 0
//  127 0xFF,0x81,0x81,0x81,0x81,0xFF,0x00,0x00,/*ÐÇºÅ*/
//  128 };
//  129 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  130 const unsigned char F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//  131 {
//  132     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//  133     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//  134     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//  135     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//  136     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//  137     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//  138     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//  139     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//  140     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//  141     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//  142     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//  143     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//  144     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//  145     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//  146     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//  147     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//  148     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//  149     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//  150     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//  151     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//  152     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//  153     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//  154     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//  155     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//  156     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//  157     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//  158     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//  159     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//  160     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//  161     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//  162     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//  163     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//  164     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//  165     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//  166     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//  167     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//  168     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//  169     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//  170     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//  171     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//  172     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//  173     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//  174     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//  175     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//  176     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//  177     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//  178     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  179     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  180     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  181     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  182     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  183     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  184     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  185     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  186     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  187     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  188     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  189     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  190     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  191     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  192     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  193     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  194     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  195     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  196     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  197     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  198     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  199     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  200     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  201     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  202     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  203     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  204     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  205     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  206     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  207     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  208     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  209     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  210     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  211     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  212     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  213     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  214     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  215     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  216     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  217     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  218     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  219     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  220     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  221     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  222     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  223     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  224 };
//  225 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  226 const unsigned char F16x8[] = {
F16x8:
        DATA
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 129, 129, 129, 129
        DC8 129, 129, 255, 4, 60, 40, 56, 56, 40, 60, 4, 255, 66, 36, 24, 24
        DC8 36, 66, 255, 255, 255, 231, 129, 129, 231, 255, 255, 255, 129, 189
        DC8 165, 165, 173, 161, 191
//  227   0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,//¿Õ¸ñ
//  228   0xff,0x81,0x81,0x81,0x81,0x81,0x81,0xff,//·½¸ñ£¬ÓÐ¼äÏ¶1
//  229   0x04,0x3C,0x28,0x38,0x38,0x28,0x3C,0x04,//ÈË2
//  230   0xff,0x42,0x24,0x18,0x18,0x24,0x42,0xff,//Ïä×Ó3
//  231   0xff,0xff,0xe7,0x81,0x81,0xe7,0xff,0xff,//Ä¿µÄµØ4
//  232   0xFF,0x81,0xBD,0xA5,0xA5,0xAD,0xA1,0xBF,//ÉµµõÍ¼ÐÎ
//  233 };
//  234 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  235 const unsigned char CB[] = {
CB:
        DATA
        DC8 0, 28, 102, 198, 134, 6, 6, 6, 12, 12, 12, 12, 24, 24, 24, 24, 24
        DC8 48, 48, 48, 48, 48, 112, 96, 96, 96, 224, 192, 192, 192, 192, 192
        DC8 192, 192, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128
        DC8 128, 192, 192, 192, 192, 192, 96, 96, 96, 96, 96, 48, 48, 48, 48
        DC8 48, 24, 24, 24, 24, 24, 8, 12, 12, 12, 12, 12, 6, 6, 6, 134, 254
        DC8 120, 0, 0, 0, 0, 0, 1, 3, 6, 12, 24, 48, 96, 128, 128, 128, 128
        DC8 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128
        DC8 128, 128, 192, 64, 64, 65, 65, 65, 65, 67, 67, 67, 71, 71, 198, 14
        DC8 12, 24, 24, 24, 56, 48, 48, 48, 48, 32, 96, 96, 96, 192, 192, 192
        DC8 128, 0, 0, 0, 0, 0, 0, 128, 128, 192, 192, 192, 192, 96, 96, 96, 96
        DC8 48, 48, 16, 24, 24, 24, 24, 12, 6, 198, 70, 67, 67, 67, 65, 65, 65
        DC8 65, 64, 64, 64, 192, 128, 128, 128, 128, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 128, 128, 128, 128, 128, 128, 192, 96, 48, 24, 12, 6
        DC8 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 14, 26
        DC8 50, 98, 194, 130, 2, 2, 2, 2, 2, 2, 2, 2, 130, 130, 66, 67, 65, 33
        DC8 161, 161, 161, 145, 209, 73, 249, 255, 240, 112, 112, 112, 240, 240
        DC8 240, 0, 254, 252, 248, 192, 248, 248, 248, 248, 193, 193, 195, 199
        DC8 12, 12, 231, 227, 225, 225, 225, 224, 224, 224, 224, 224, 224, 224
        DC8 224, 0, 224, 224, 224, 224, 0, 240, 240, 255, 241, 81, 81, 145, 161
        DC8 161, 161, 161, 33, 65, 65, 130, 130, 2, 2, 2, 2, 2, 2, 2, 2, 2, 130
        DC8 194, 98, 50, 26, 14, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 10, 26, 58
        DC8 106, 201, 137, 133, 5, 132, 67, 65, 33, 161, 145, 72, 40, 40, 40
        DC8 40, 255, 255, 255, 140, 140, 140, 255, 255, 255, 0, 223, 223, 223
        DC8 195, 255, 255, 255, 255, 195, 195, 195, 195, 0, 0, 61, 61, 61, 189
        DC8 253, 255, 255, 255, 255, 189, 61, 61, 60, 0, 255, 255, 255, 255, 0
        DC8 255, 255, 255, 255, 168, 40, 40, 72, 88, 144, 161, 33, 65, 130, 130
        DC8 4, 5, 137, 139, 202, 110, 58, 26, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 12, 26, 17, 17
        DC8 80, 216, 166, 19, 9, 5, 5, 255, 255, 255, 1, 97, 225, 255, 255, 255
        DC8 0, 227, 227, 227, 227, 255, 255, 255, 255, 227, 227, 227, 227, 224
        DC8 224, 0, 255, 255, 127, 63, 255, 255, 255, 255, 31, 63, 126, 124
        DC8 120, 15, 47, 239, 239, 224, 255, 255, 255, 255, 5, 5, 9, 146, 166
        DC8 216, 17, 19, 18, 26, 14, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 1, 1, 1, 129, 225, 127, 63, 15, 2, 6, 12, 25, 51
        DC8 103, 192, 129, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0
        DC8 255, 255, 255, 255, 0, 0, 0, 0, 128, 192, 96, 56, 13, 7, 31, 127
        DC8 255, 255, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 1, 3, 6, 12, 24, 48, 96, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 195, 111, 63, 127, 24, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0
        DC8 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 6, 12, 12, 12, 12, 6, 3, 1, 1, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  236 
//  237 0x00,0x1C,0x66,0xC6,0x86,0x06,0x06,0x06,0x0C,0x0C,0x0C,0x0C,0x18,0x18,0x18,0x18,
//  238 0x18,0x30,0x30,0x30,0x30,0x30,0x70,0x60,0x60,0x60,0xE0,0xC0,0xC0,0xC0,0xC0,0xC0,
//  239 0xC0,0xC0,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  240 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  241 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  242 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0xC0,
//  243 0xC0,0xC0,0xC0,0xC0,0x60,0x60,0x60,0x60,0x60,0x30,0x30,0x30,0x30,0x30,0x18,0x18,
//  244 0x18,0x18,0x18,0x08,0x0C,0x0C,0x0C,0x0C,0x0C,0x06,0x06,0x06,0x86,0xFE,0x78,0x00,
//  245 0x00,0x00,0x00,0x00,0x01,0x03,0x06,0x0C,0x18,0x30,0x60,0x80,0x80,0x80,0x80,0x80,
//  246 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xC0,0x40,
//  247 0x40,0x41,0x41,0x41,0x41,0x43,0x43,0x43,0x47,0x47,0xC6,0x0E,0x0C,0x18,0x18,0x18,
//  248 0x38,0x30,0x30,0x30,0x30,0x20,0x60,0x60,0x60,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,
//  249 0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0xC0,0x60,0x60,0x60,0x60,0x30,0x30,0x10,
//  250 0x18,0x18,0x18,0x18,0x0C,0x06,0xC6,0x46,0x43,0x43,0x43,0x41,0x41,0x41,0x41,0x40,
//  251 0x40,0x40,0xC0,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  252 0x80,0x80,0x80,0x80,0x80,0xC0,0x60,0x30,0x18,0x0C,0x06,0x03,0x01,0x00,0x00,0x00,
//  253 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x06,0x0E,
//  254 0x1A,0x32,0x62,0xC2,0x82,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x82,0x82,0x42,
//  255 0x43,0x41,0x21,0xA1,0xA1,0xA1,0x91,0xD1,0x49,0xF9,0xFF,0xF0,0x70,0x70,0x70,0xF0,
//  256 0xF0,0xF0,0x00,0xFE,0xFC,0xF8,0xC0,0xF8,0xF8,0xF8,0xF8,0xC1,0xC1,0xC3,0xC7,0x0C,
//  257 0x0C,0xE7,0xE3,0xE1,0xE1,0xE1,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x00,0xE0,
//  258 0xE0,0xE0,0xE0,0x00,0xF0,0xF0,0xFF,0xF1,0x51,0x51,0x91,0xA1,0xA1,0xA1,0xA1,0x21,
//  259 0x41,0x41,0x82,0x82,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x82,0xC2,0x62,
//  260 0x32,0x1A,0x0E,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  261 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  262 0x00,0x00,0x00,0x00,0x01,0x03,0x0A,0x1A,0x3A,0x6A,0xC9,0x89,0x85,0x05,0x84,0x43,
//  263 0x41,0x21,0xA1,0x91,0x48,0x28,0x28,0x28,0x28,0xFF,0xFF,0xFF,0x8C,0x8C,0x8C,0xFF,
//  264 0xFF,0xFF,0x00,0xDF,0xDF,0xDF,0xC3,0xFF,0xFF,0xFF,0xFF,0xC3,0xC3,0xC3,0xC3,0x00,
//  265 0x00,0x3D,0x3D,0x3D,0xBD,0xFD,0xFF,0xFF,0xFF,0xFF,0xBD,0x3D,0x3D,0x3C,0x00,0xFF,
//  266 0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xFF,0xA8,0x28,0x28,0x48,0x58,0x90,0xA1,0x21,
//  267 0x41,0x82,0x82,0x04,0x05,0x89,0x8B,0xCA,0x6E,0x3A,0x1A,0x02,0x03,0x01,0x00,0x00,
//  268 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  269 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  270 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x0C,0x1A,
//  271 0x11,0x11,0x50,0xD8,0xA6,0x13,0x09,0x05,0x05,0xFF,0xFF,0xFF,0x01,0x61,0xE1,0xFF,
//  272 0xFF,0xFF,0x00,0xE3,0xE3,0xE3,0xE3,0xFF,0xFF,0xFF,0xFF,0xE3,0xE3,0xE3,0xE3,0xE0,
//  273 0xE0,0x00,0xFF,0xFF,0x7F,0x3F,0xFF,0xFF,0xFF,0xFF,0x1F,0x3F,0x7E,0x7C,0x78,0x0F,
//  274 0x2F,0xEF,0xEF,0xE0,0xFF,0xFF,0xFF,0xFF,0x05,0x05,0x09,0x92,0xA6,0xD8,0x11,0x13,
//  275 0x12,0x1A,0x0E,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  276 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  277 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  278 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  279 0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x81,0xE1,0x7F,0x3F,0x0F,0x02,0x06,0x0C,0x19,
//  280 0x33,0x67,0xC0,0x81,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
//  281 0x01,0x00,0x01,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x80,0xC0,
//  282 0x60,0x38,0x0D,0x07,0x1F,0x7F,0xFF,0xFF,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
//  283 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  284 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  285 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  286 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  287 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  288 0x00,0x00,0x00,0x01,0x03,0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00,0x00,0x00,0x00,
//  289 0x00,0x00,0x00,0x00,0x80,0x80,0xC3,0x6F,0x3F,0x7F,0x18,0x0C,0x06,0x03,0x01,0x00,
//  290 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  291 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  292 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  293 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  294 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  295 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  296 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x06,0x0C,0x0C,
//  297 0x0C,0x0C,0x06,0x03,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  298 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  299 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  300 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//Ê¤Àû
//  301 
//  302 };
//  303 
//  304 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  305 const unsigned char F128x64[] = {
F128x64:
        DATA
        DC8 0, 0, 0, 0, 0, 192, 192, 0, 128, 192, 192, 64, 192, 128, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 254, 62, 62, 254, 254, 50, 178, 178, 190, 190, 190
        DC8 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 190, 62
        DC8 190, 190, 190, 178, 178, 62, 254, 62, 62, 62, 254, 0, 0, 0, 254
        DC8 254, 62, 62, 254, 62, 50, 178, 190, 190, 190, 62, 190, 62, 62, 62
        DC8 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 190, 190, 190, 190, 178
        DC8 50, 254, 254, 62, 62, 254, 0, 0, 0, 0, 252, 254, 254, 254, 254, 254
        DC8 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254
        DC8 254, 254, 254, 0, 0, 0, 0, 17, 255, 255, 15, 255, 255, 149, 255
        DC8 255, 149, 149, 149, 128, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255
        DC8 0, 15, 31, 63, 255, 255, 255, 254, 254, 252, 248, 240, 224, 192
        DC8 192, 240, 248, 248, 252, 254, 255, 255, 255, 255, 63, 31, 24, 0
        DC8 255, 255, 255, 255, 255, 0, 0, 0, 255, 255, 255, 255, 255, 0, 24
        DC8 31, 63, 255, 255, 255, 255, 254, 252, 248, 248, 240, 192, 192, 224
        DC8 240, 248, 252, 254, 254, 255, 255, 255, 63, 63, 15, 0, 255, 255
        DC8 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 128, 193, 193, 231, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 231, 193
        DC8 193, 128, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 255
        DC8 255, 255, 255, 0, 0, 0, 0, 0, 128, 193, 231, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 231, 193, 193, 128, 0, 0, 0
        DC8 0, 255, 255, 255, 255, 255, 0, 0, 204, 202, 201, 201, 201, 201, 201
        DC8 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 9, 17, 241
        DC8 9, 9, 201, 0, 0, 0, 0, 128, 224, 224, 224, 64, 192, 224, 96, 224
        DC8 192, 192, 64, 0, 0, 0, 0, 0, 0, 0, 255, 127, 127, 255, 255, 0, 240
        DC8 240, 254, 255, 255, 127, 127, 127, 63, 15, 15, 7, 3, 3, 7, 15, 15
        DC8 63, 127, 255, 127, 255, 255, 254, 252, 12, 0, 255, 127, 127, 127
        DC8 255, 0, 0, 0, 255, 255, 127, 127, 255, 0, 12, 252, 254, 255, 255
        DC8 127, 255, 127, 63, 15, 15, 7, 3, 3, 7, 15, 15, 63, 127, 127, 127
        DC8 255, 255, 254, 254, 240, 0, 255, 255, 127, 127, 255, 0, 0, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 0, 0, 255, 0, 0, 255, 0, 0, 0, 0, 51, 63, 255, 255
        DC8 27, 255, 255, 85, 85, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 127, 126
        DC8 126, 127, 127, 100, 100, 100, 124, 124, 124, 124, 124, 124, 124
        DC8 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124
        DC8 126, 124, 102, 102, 126, 127, 126, 126, 126, 127, 0, 0, 0, 127, 127
        DC8 126, 126, 127, 126, 100, 100, 124, 124, 124, 124, 124, 124, 124
        DC8 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124
        DC8 124, 124, 124, 100, 100, 127, 127, 126, 126, 127, 0, 0, 63, 63, 63
        DC8 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 0, 0
        DC8 127, 0, 32, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 224, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224
        DC8 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 32, 224, 224, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 224, 224
        DC8 0, 0, 0, 0, 1, 1, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249
        DC8 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 0, 0, 0
        DC8 0, 0, 16, 16, 16, 16, 144, 208, 112, 112, 48, 16, 0, 0, 0, 31, 31
        DC8 27, 17, 31, 14, 33, 39, 63, 31, 7, 1, 0, 0, 0, 0, 0, 0, 31, 31, 19
        DC8 17, 31, 30, 19, 27, 29, 23, 27, 25, 14, 31, 17, 63, 63, 32, 0, 0, 0
        DC8 0, 0, 0, 0, 16, 31, 31, 16, 0, 32, 32, 33, 63, 63, 0, 18, 23, 21
        DC8 21, 29, 8, 0, 0, 0, 0, 0, 0, 18, 23, 21, 21, 29, 8, 33, 39, 63, 31
        DC8 7, 1, 0, 16, 31, 31, 16, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 0, 0, 0, 0, 2, 2, 66, 66, 66, 127, 127, 2, 2, 2
        DC8 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136
        DC8 140, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135
        DC8 135, 135, 135, 135, 199, 231, 231, 7, 7, 135
//  306 0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x80,0xC0,0xC0,0x40,0xC0,0x80,
//  307 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x3E,0x3E,0xFE,0xFE,
//  308 0x32,0xB2,0xB2,0xBE,0xBE,0xBE,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,
//  309 0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0xBE,0x3E,0xBE,0xBE,0xBE,0xB2,0xB2,0x3E,
//  310 0xFE,0x3E,0x3E,0x3E,0xFE,0x00,0x00,0x00,0xFE,0xFE,0x3E,0x3E,0xFE,0x3E,
//  311 0x32,0xB2,0xBE,0xBE,0xBE,0x3E,0xBE,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,
//  312 0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0x3E,0xBE,0xBE,0xBE,0xBE,0xB2,0x32,0xFE,
//  313 0xFE,0x3E,0x3E,0xFE,0x00,0x00,0x00,0x00,0xFC,0xFE,0xFE,0xFE,0xFE,0xFE,
//  314 0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,
//  315 0xFE,0xFE,0x00,0x00,0x00,0x00,0x11,0xFF,0xFF,0x0F,0xFF,0xFF,0x95,0xFF,
//  316 0xFF,0x95,0x95,0x95,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,
//  317 0xFF,0xFF,0x00,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFE,0xFE,0xFC,0xF8,0xF0,
//  318 0xE0,0xC0,0xC0,0xF0,0xF8,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0x3F,0x1F,
//  319 0x18,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,
//  320 0xFF,0x00,0x18,0x1F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xF8,0xF8,0xF0,
//  321 0xC0,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFE,0xFF,0xFF,0xFF,0x3F,0x3F,0x0F,
//  322 0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,
//  323 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//  324 0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x01,0x01,
//  325 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  326 0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x80,0xC1,0xC1,0xE7,0xFF,0xFF,
//  327 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0xC1,0xC1,0x80,
//  328 0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,
//  329 0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x80,0xC1,0xE7,0xFF,0xFF,0xFF,
//  330 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0xC1,0xC1,0x80,0x00,
//  331 0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xCC,0xCA,0xC9,0xC9,
//  332 0xC9,0xC9,0xC9,0xC9,0xC9,0xC9,0xC9,0xC9,0xC9,0xC9,0xC9,0xC9,0xC9,0xC9,
//  333 0x09,0x11,0xF1,0x09,0x09,0xC9,0x00,0x00,0x00,0x00,0x80,0xE0,0xE0,0xE0,
//  334 0x40,0xC0,0xE0,0x60,0xE0,0xC0,0xC0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
//  335 0x00,0xFF,0x7F,0x7F,0xFF,0xFF,0x00,0xF0,0xF0,0xFE,0xFF,0xFF,0x7F,0x7F,
//  336 0x7F,0x3F,0x0F,0x0F,0x07,0x03,0x03,0x07,0x0F,0x0F,0x3F,0x7F,0xFF,0x7F,
//  337 0xFF,0xFF,0xFE,0xFC,0x0C,0x00,0xFF,0x7F,0x7F,0x7F,0xFF,0x00,0x00,0x00,
//  338 0xFF,0xFF,0x7F,0x7F,0xFF,0x00,0x0C,0xFC,0xFE,0xFF,0xFF,0x7F,0xFF,0x7F,
//  339 0x3F,0x0F,0x0F,0x07,0x03,0x03,0x07,0x0F,0x0F,0x3F,0x7F,0x7F,0x7F,0xFF,
//  340 0xFF,0xFE,0xFE,0xF0,0x00,0xFF,0xFF,0x7F,0x7F,0xFF,0x00,0x00,0xFF,0xFF,
//  341 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//  342 0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x33,0x3F,
//  343 0xFF,0xFF,0x1B,0xFF,0xFF,0x55,0x55,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
//  344 0x00,0x00,0x00,0x7F,0x7E,0x7E,0x7F,0x7F,0x64,0x64,0x64,0x7C,0x7C,0x7C,
//  345 0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,
//  346 0x7C,0x7C,0x7C,0x7E,0x7C,0x66,0x66,0x7E,0x7F,0x7E,0x7E,0x7E,0x7F,0x00,
//  347 0x00,0x00,0x7F,0x7F,0x7E,0x7E,0x7F,0x7E,0x64,0x64,0x7C,0x7C,0x7C,0x7C,
//  348 0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,
//  349 0x7C,0x7C,0x7C,0x7C,0x7C,0x64,0x64,0x7F,0x7F,0x7E,0x7E,0x7F,0x00,0x00,
//  350 0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,
//  351 0x3F,0x3F,0x3F,0x3F,0x00,0x00,0x7F,0x00,0x20,0x3F,0x00,0x00,0x00,0x00,
//  352 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  353 0xE0,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  354 0x00,0x00,0x00,0x00,0xE0,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  355 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  356 0x00,0x20,0xE0,0xE0,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x00,0x00,0x00,
//  357 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  358 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xE0,0xE0,0x00,0x00,
//  359 0x00,0x00,0x01,0x01,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,
//  360 0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0x00,0x00,
//  361 0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x90,0xD0,0x70,0x70,0x30,0x10,0x00,
//  362 0x00,0x00,0x1F,0x1F,0x1B,0x11,0x1F,0x0E,0x21,0x27,0x3F,0x1F,0x07,0x01,
//  363 0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x1F,0x13,0x11,0x1F,0x1E,0x13,0x1B,
//  364 0x1D,0x17,0x1B,0x19,0x0E,0x1F,0x11,0x3F,0x3F,0x20,0x00,0x00,0x00,0x00,
//  365 0x00,0x00,0x00,0x10,0x1F,0x1F,0x10,0x00,0x20,0x20,0x21,0x3F,0x3F,0x00,
//  366 0x12,0x17,0x15,0x15,0x1D,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x17,
//  367 0x15,0x15,0x1D,0x08,0x21,0x27,0x3F,0x1F,0x07,0x01,0x00,0x10,0x1F,0x1F,
//  368 0x10,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//  369 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//  370 0x00,0x00,0x00,0x00,0x02,0x02,0x42,0x42,0x42,0x7F,0x7F,0x02,0x02,0x02,
//  371 0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  372 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  373 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  374 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  375 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  376 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  377 0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x8C,0x87,0x87,0x87,0x87,0x87,0x87,
//  378 0x87,0x87,0x87,0x87,0x87,0x87,0x87,0x87,0x87,0x87,0xC7,0xE7,0xE7,0x07,
//  379 0x07,0x87,};
//  380 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  381 const unsigned char F128x641[] = {
F128x641:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 96, 16, 8, 12
        DC8 100, 98, 98, 99, 1, 1, 1, 193, 113, 113, 49, 177, 177, 49, 2, 2, 4
        DC8 4, 8, 16, 96, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 3, 0, 0, 0, 0, 2
        DC8 198, 66, 128, 128, 128, 192, 192, 192, 65, 33, 65, 65, 193, 1, 0, 0
        DC8 112, 0, 0, 0, 1, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 24, 48, 96, 64
        DC8 128, 128, 0, 0, 20, 20, 17, 17, 18, 2, 10, 2, 2, 1, 0, 0, 0, 128
        DC8 192, 96, 112, 204, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 1, 38, 0, 11, 68, 96, 48, 112, 64, 128, 0, 7, 14, 4, 0, 0
        DC8 192, 96, 56, 13, 3, 7, 58, 194, 2, 2, 2, 34, 226, 226, 226, 226
        DC8 227, 225, 225, 224, 0, 0, 0, 255, 227, 12, 56, 192, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 230
        DC8 60, 24, 28, 55, 33, 96, 192, 128, 0, 0, 0, 255, 96, 144, 216, 104
        DC8 56, 24, 56, 120, 208, 144, 16, 16, 16, 16, 24, 12, 7, 0, 0, 1, 255
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128
        DC8 128, 192, 112, 31, 0, 0, 0, 0, 8, 0, 0, 128, 129, 97, 50, 14, 62
        DC8 35, 33, 32, 32, 96, 96, 96, 64, 64, 65, 67, 70, 76, 216, 208, 224
        DC8 192, 192, 192, 48, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  382 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  383 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  384 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  385 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  386 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  387 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  388 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  389 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  390 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  391 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  392 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  393 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  394 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x10,0x08,0x0C,
//  395 0x64,0x62,0x62,0x63,0x01,0x01,0x01,0xC1,0x71,0x71,0x31,0xB1,0xB1,0x31,
//  396 0x02,0x02,0x04,0x04,0x08,0x10,0x60,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,
//  397 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  398 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  399 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  400 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  401 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  402 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  403 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x03,0x00,0x00,
//  404 0x00,0x00,0x02,0xC6,0x42,0x80,0x80,0x80,0xC0,0xC0,0xC0,0x41,0x21,0x41,
//  405 0x41,0xC1,0x01,0x00,0x00,0x70,0x00,0x00,0x00,0x01,0xFE,0x00,0x00,0x00,
//  406 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  407 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  408 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  409 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  410 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  411 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  412 0x00,0x80,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x18,
//  413 0x30,0x60,0x40,0x80,0x80,0x00,0x00,0x14,0x14,0x11,0x11,0x12,0x02,0x0A,
//  414 0x02,0x02,0x01,0x00,0x00,0x00,0x80,0xC0,0x60,0x70,0xCC,0x03,0x01,0x00,
//  415 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  416 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  417 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  418 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  419 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  420 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  421 0x00,0x01,0x26,0x00,0x0B,0x44,0x60,0x30,0x70,0x40,0x80,0x00,0x07,0x0E,
//  422 0x04,0x00,0x00,0xC0,0x60,0x38,0x0D,0x03,0x07,0x3A,0xC2,0x02,0x02,0x02,
//  423 0x22,0xE2,0xE2,0xE2,0xE2,0xE3,0xE1,0xE1,0xE0,0x00,0x00,0x00,0xFF,0xE3,
//  424 0x0C,0x38,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  425 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  426 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  427 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  428 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  429 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  430 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,
//  431 0xE6,0x3C,0x18,0x1C,0x37,0x21,0x60,0xC0,0x80,0x00,0x00,0x00,0xFF,0x60,
//  432 0x90,0xD8,0x68,0x38,0x18,0x38,0x78,0xD0,0x90,0x10,0x10,0x10,0x10,0x18,
//  433 0x0C,0x07,0x00,0x00,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  434 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  435 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  436 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  437 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  438 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  439 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0xC0,
//  440 0x70,0x1F,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x80,0x81,0x61,0x32,0x0E,
//  441 0x3E,0x23,0x21,0x20,0x20,0x60,0x60,0x60,0x40,0x40,0x41,0x43,0x46,0x4C,
//  442 0xD8,0xD0,0xE0,0xC0,0xC0,0xC0,0x30,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,
//  443 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  444 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  445 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  446 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  447 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  448 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  449 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x00,
//  450 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  451 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  452 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  453 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  454 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  455 0x00,0x00,};
//  456 
//  457 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  458 const unsigned char F14x16[] = {
F14x16:
        DATA
        DC8 0, 0, 64, 120, 64, 64, 64, 254, 72, 72, 72, 72, 64, 0, 0, 144, 136
        DC8 68, 66, 64, 32, 47, 16, 8, 4, 3, 0, 0, 0, 0, 172, 96, 254, 80, 220
        DC8 224, 252, 34, 32, 224, 16, 0, 0, 1, 68, 46, 53, 28, 167, 64, 33, 30
        DC8 62, 97, 64, 0, 0, 96, 88, 198, 48, 0, 56, 72, 74, 76, 72, 104, 24
        DC8 0, 0, 100, 39, 20, 80, 32, 24, 1, 65, 126, 5, 9, 49, 0, 0, 0, 128
        DC8 64, 160, 152, 134, 140, 144, 224, 192, 192, 128, 0, 0, 0, 0, 126
        DC8 36, 36, 36, 36, 36, 60, 0, 0, 0, 0, 0, 32, 24, 196, 50, 32, 252, 84
        DC8 84, 84, 84, 252, 0, 0, 0, 2, 1, 127, 4, 5, 12, 53, 69, 69, 127, 4
        DC8 6, 0, 0, 0, 128, 224, 152, 132, 128, 128, 142, 176, 192, 128, 128
        DC8 0, 0, 129, 64, 32, 16, 15, 0, 64, 64, 63, 0, 0, 0, 0, 0, 0, 16, 254
        DC8 144, 144, 240, 142, 144, 244, 136, 144, 136, 0, 0, 2, 65, 127, 0, 0
        DC8 127, 36, 36, 63, 36, 36, 36, 0, 0, 160, 152, 230, 170, 184, 164
        DC8 216, 76, 74, 120, 200, 0, 0, 0, 16, 12, 255, 2, 4, 0, 127, 74, 74
        DC8 74, 127, 0, 0, 0, 128, 128, 132, 132, 132, 132, 228, 148, 140, 132
        DC8 132, 128, 0, 0, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0, 0, 0, 16
        DC8 200, 38, 72, 136, 148, 168, 166, 40, 40, 228, 0, 0, 0, 0, 127, 0, 0
        DC8 31, 20, 20, 31, 0, 64, 127, 0, 0, 0, 0, 0, 240, 82, 92, 240, 80, 92
        DC8 82, 240, 0, 0, 0, 0, 8, 12, 11, 10, 10, 255, 10, 10, 10, 11, 8, 8
        DC8 0, 0, 0, 24, 40, 10, 252, 8, 8, 252, 138, 120, 8, 128, 0, 0, 1, 1
        DC8 61, 83, 82, 83, 83, 82, 82, 63, 1, 0, 0, 0, 64, 76, 192, 0, 240
        DC8 146, 146, 250, 154, 148, 240, 0, 0, 0, 32, 16, 31, 32, 63, 66, 66
        DC8 95, 66, 66, 95, 64, 0, 0, 0, 252, 36, 36, 164, 100, 188, 36, 36, 36
        DC8 254, 0, 0, 0, 0, 127, 72, 70, 65, 96, 95, 65, 66, 68, 127, 0, 0, 0
        DC8 32, 200, 8, 232, 152, 64, 252, 146, 242, 156, 144, 144, 0, 0, 48, 8
        DC8 7, 5, 25, 0, 127, 68, 63, 68, 68, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128
        DC8 64, 32, 16, 120, 64, 64, 64, 64, 192, 0, 0, 0, 0, 1, 2, 4, 8, 30, 2
        DC8 2, 2, 2, 3, 0, 0, 0, 248, 136, 136, 248, 32, 160, 32, 32, 32, 254
        DC8 32, 0, 0, 0, 63, 8, 8, 31, 0, 0, 3, 0, 64, 63, 0, 0, 0, 0, 0, 248
        DC8 4, 0, 228, 36, 36, 228, 4, 4, 252, 0, 0, 0, 0, 127, 0, 0, 15, 9, 9
        DC8 15, 0, 64, 127, 0, 0, 0, 0, 252, 36, 252, 0, 240, 16, 16, 254, 16
        DC8 224, 16, 0, 0, 120, 7, 1, 127, 0, 3, 1, 1, 127, 1, 1, 0, 0, 0, 0, 0
        DC8 128, 64, 48, 12, 4, 192, 0, 0, 0, 0, 0, 0, 2, 1, 32, 48, 44, 34, 33
        DC8 16, 20, 24, 112, 0, 0, 0, 0, 252, 4, 68, 164, 36, 36, 196, 4, 4
        DC8 252, 0, 0, 0, 0, 127, 32, 32, 35, 34, 34, 35, 32, 32, 127, 0, 0, 0
        DC8 0, 4, 244, 84, 84, 84, 254, 84, 84, 116, 4, 4, 0, 0, 4, 4, 21, 21
        DC8 85, 117, 31, 21, 21, 31, 4, 2, 0, 0, 128, 64, 48, 0, 0, 255, 0, 0
        DC8 16, 32, 64, 128, 0, 1, 0, 0, 0, 32, 32, 63, 0, 0, 0, 0, 0, 1, 0, 0
        DC8 192, 0, 0, 240, 1, 2, 12, 0, 0, 64, 128, 0, 0, 4, 3, 0, 0, 31, 32
        DC8 32, 32, 32, 56, 0, 1, 6, 0, 252, 4, 4, 252, 32, 36, 252, 34, 32
        DC8 255, 32, 162, 44, 0, 7, 2, 2, 7, 34, 34, 63, 1, 32, 17, 14, 19, 60
        DC8 0, 64, 66, 204, 0, 2, 130, 66, 34, 242, 14, 34, 66, 130, 0, 32, 16
        DC8 15, 16, 33, 32, 32, 32, 47, 32, 32, 32, 33, 0, 40, 170, 250, 10
        DC8 254, 9, 249, 73, 168, 0, 248, 0, 255, 0, 17, 8, 5, 2, 63, 2, 4, 9
        DC8 17, 0, 35, 32, 63, 0, 0, 0, 16, 254, 144, 144, 8, 8, 8, 8, 8, 8
        DC8 240, 0, 0, 2, 65, 127, 0, 0, 33, 33, 33, 33, 33, 33, 30, 0, 0, 48
        DC8 8, 44, 44, 12, 252, 12, 44, 172, 42, 40, 24, 0, 0, 0, 0, 126, 74
        DC8 74, 62, 74, 74, 74, 126, 0, 0, 0, 0, 248, 36, 36, 252, 16, 208, 48
        DC8 210, 204, 48, 208, 8, 0, 64, 63, 66, 66, 127, 0, 127, 72, 68, 67
        DC8 76, 127, 0, 0, 0, 0, 136, 168, 168, 168, 188, 170, 168, 168, 184
        DC8 140, 136, 0, 0, 129, 64, 64, 56, 6, 2, 2, 62, 66, 64, 65, 120, 0, 0
        DC8 16, 32, 248, 8, 136, 104, 122, 172, 168, 104, 8, 8, 0, 0, 66, 49
        DC8 15, 5, 4, 2, 38, 37, 106, 2, 4, 4, 0, 252, 252, 12, 12, 12, 12, 12
        DC8 12, 12, 12, 252, 252, 0, 0, 63, 63, 48, 48, 48, 48, 48, 48, 48, 48
        DC8 63, 63, 0, 0, 0, 0, 8, 136, 136, 136, 248, 136, 136, 136, 136, 8, 0
        DC8 0, 0, 32, 32, 32, 32, 63, 32, 32, 32, 32, 63, 32, 32, 0, 0, 0, 8, 8
        DC8 8, 8, 8, 200, 72, 40, 24, 8, 0, 0, 0, 1, 1, 1, 1, 65, 65, 127, 1, 1
        DC8 1, 1, 1, 1, 0, 32, 160, 252, 160, 32, 16, 252, 80, 80, 80, 252, 16
        DC8 16, 0, 6, 1, 127, 64, 75, 40, 31, 9, 9, 25, 31, 104, 8, 0, 0, 252
        DC8 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 0, 0, 63, 63
        DC8 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 0, 128, 128, 144, 144, 144
        DC8 252, 146, 144, 144, 136, 128, 128, 0, 0, 32, 16, 8, 4, 2, 127, 0, 3
        DC8 12, 24, 48, 0, 0, 0, 32, 24, 72, 72, 72, 74, 76, 72, 40, 72, 48, 0
        DC8 0, 0, 128, 65, 33, 57, 6, 1, 1, 126, 65, 65, 65, 112, 0, 0, 0, 240
        DC8 16, 16, 16, 16, 126, 146, 18, 28, 208, 16, 0, 0, 96, 31, 17, 17, 63
        DC8 65, 32, 23, 28, 51, 96, 112, 0, 0, 128, 128, 128, 128, 128, 254
        DC8 136, 136, 136, 136, 128, 64, 0, 0, 0, 0, 0, 0, 0, 127, 2, 2, 4, 12
        DC8 8, 0, 0, 0, 0, 152, 72, 56, 8, 202, 140, 24, 40, 72, 216, 8, 0, 0
        DC8 8, 4, 4, 126, 69, 68, 68, 69, 126, 6, 4, 4, 0, 0, 64, 64, 254, 218
        DC8 218, 90, 218, 218, 218, 254, 64, 96, 0, 0, 0, 64, 95, 90, 90, 127
        DC8 90, 90, 90, 95, 64, 64, 0, 0, 0, 4, 228, 36, 36, 228, 36, 4, 4, 248
        DC8 4, 4, 0, 0, 0, 0, 7, 4, 4, 7, 0, 0, 64, 63, 0, 0, 0, 0, 0, 254, 36
        DC8 36, 36, 36, 252, 36, 36, 36, 254, 0, 0, 0, 96, 31, 2, 2, 2, 2, 127
        DC8 2, 2, 66, 127, 0, 0, 0, 0, 0, 240, 18, 28, 16, 16, 28, 18, 240, 0
        DC8 0, 0, 0, 32, 24, 3, 125, 66, 69, 77, 65, 121, 7, 8, 16, 0, 0, 32
        DC8 184, 136, 72, 48, 10, 12, 8, 40, 72, 240, 8, 0, 0, 65, 64, 64, 65
        DC8 65, 126, 65, 65, 65, 65, 64, 64, 0, 0, 0, 144, 254, 144, 96, 16, 30
        DC8 234, 232, 24, 8, 0, 0, 0, 6, 1, 127, 4, 2, 254, 69, 68, 68, 125, 2
        DC8 2, 0, 0, 252, 4, 252, 4, 36, 168, 184, 166, 168, 184, 164, 32, 0, 0
        DC8 127, 4, 8, 23, 24, 23, 22, 250, 22, 22, 31, 16, 0, 0, 4, 244, 76
        DC8 132, 4, 0, 124, 84, 84, 84, 126, 128, 0, 0, 3, 63, 16, 31, 0, 4, 13
        DC8 21, 69, 69, 63, 2, 0, 0, 160, 152, 230, 170, 184, 164, 216, 76, 74
        DC8 120, 200, 0, 0, 0, 16, 12, 255, 2, 4, 0, 127, 74, 74, 74, 127, 0, 0
        DC8 0, 128, 128, 132, 132, 132, 132, 228, 148, 140, 132, 132, 128, 0, 0
        DC8 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0, 0, 0, 96, 88, 198, 96, 80
        DC8 32, 60, 202, 200, 56, 8, 0, 0, 0, 100, 39, 18, 18, 2, 2, 19, 18, 36
        DC8 97, 2, 2, 0, 0, 0, 0, 192, 64, 64, 126, 74, 72, 72, 200, 8, 0, 0, 0
        DC8 64, 112, 15, 4, 36, 4, 4, 36, 4, 7, 48, 64, 0, 0, 0, 0, 240, 144
        DC8 136, 150, 144, 144, 144, 248, 0, 0, 0, 0, 0, 0, 127, 68, 68, 68, 68
        DC8 68, 68, 127, 0, 0, 0, 0, 96, 88, 80, 254, 80, 80, 80, 0, 248, 0, 0
        DC8 254, 0, 0, 30, 1, 1, 127, 17, 49, 15, 0, 15, 64, 64, 63, 0, 0, 0, 0
        DC8 68, 100, 84, 204, 68, 68, 162, 18, 2, 0, 0, 0, 64, 32, 18, 15, 11
        DC8 66, 126, 2, 10, 17, 51, 96, 0, 0, 96, 80, 206, 96, 16, 136, 72, 58
        DC8 140, 136, 200, 136, 0, 0, 34, 19, 18, 146, 66, 65, 61, 3, 0, 127
        DC8 64, 113, 0, 0, 64, 68, 248, 64, 128, 248, 64, 254, 32, 32, 240, 0
        DC8 0, 0, 32, 16, 31, 8, 8, 127, 64, 79, 64, 68, 71, 120, 0, 0, 0, 252
        DC8 66, 34, 28, 234, 202, 50, 2, 2, 2, 252, 0, 0, 0, 127, 34, 34, 41
        DC8 42, 42, 49, 33, 34, 32, 63, 0, 0, 96, 88, 196, 48, 192, 56, 40, 42
        DC8 44, 40, 56, 0, 0, 0, 22, 19, 82, 50, 14, 127, 9, 63, 9, 127, 73
        DC8 127, 0, 0, 192, 184, 246, 144, 192, 236, 84, 84, 84, 252, 64, 64, 0
        DC8 0, 9, 8, 127, 4, 4, 30, 21, 21, 21, 127, 16, 8, 0, 0, 128, 188, 164
        DC8 164, 188, 192, 128, 188, 228, 164, 156, 128, 0, 0, 8, 4, 60, 38, 61
        DC8 0, 124, 37, 38, 38, 124, 4, 0, 0, 0, 0, 68, 100, 84, 204, 68, 68
        DC8 162, 18, 2, 0, 0, 0, 64, 32, 18, 15, 11, 66, 126, 2, 10, 17, 51, 96
        DC8 0, 0, 96, 80, 206, 96, 16, 136, 72, 58, 140, 136, 200, 136, 0, 0
        DC8 34, 19, 18, 146, 66, 65, 61, 3, 0, 127, 64, 113, 0, 0, 0, 252, 66
        DC8 34, 28, 234, 202, 50, 2, 2, 2, 252, 0, 0, 0, 127, 34, 34, 41, 42
        DC8 42, 49, 33, 34, 32, 63, 0, 0, 132, 132, 252, 132, 132, 252, 68, 36
        DC8 16, 8, 196, 64, 0, 0, 64, 56, 7, 0, 0, 63, 0, 66, 34, 17, 8, 4, 0
        DC8 0, 0, 136, 72, 176, 8, 10, 12, 136, 168, 72, 200, 8, 0, 0, 129, 64
        DC8 64, 32, 35, 28, 28, 35, 32, 64, 64, 64, 0, 0, 0, 4, 4, 228, 88, 68
        DC8 68, 68, 228, 4, 4, 0, 0, 0, 64, 64, 64, 71, 68, 68, 68, 100, 95, 64
        DC8 64, 96, 0, 0, 0, 0, 68, 100, 84, 204, 68, 68, 162, 18, 2, 0, 0, 0
        DC8 64, 32, 18, 15, 11, 66, 126, 2, 10, 17, 51, 96, 0, 0, 96, 80, 206
        DC8 96, 16, 136, 72, 58, 140, 136, 200, 136, 0, 0, 34, 19, 18, 146, 66
        DC8 65, 61, 3, 0, 127, 64, 113, 0, 0, 0, 16, 254, 144, 16, 44, 80, 80
        DC8 72, 72, 68, 96, 0, 0, 2, 66, 127, 0, 0, 0, 62, 42, 42, 42, 127, 0
        DC8 0, 0, 0, 0, 254, 146, 146, 146, 146, 146, 146, 158, 224, 0, 0, 0, 0
        DC8 4, 4, 12, 20, 4, 68, 68, 63, 4, 2, 0, 0, 0, 0, 64, 80, 80, 80, 126
        DC8 144, 80, 104, 88, 68, 64, 0, 0, 16, 8, 8, 4, 126, 73, 72, 68, 70
        DC8 66, 120, 0, 0, 0, 240, 0, 252, 2, 4, 228, 36, 36, 252, 36, 36, 228
        DC8 0, 0, 67, 48, 15, 0, 0, 15, 0, 0, 127, 8, 16, 15, 0, 0, 136, 136
        DC8 152, 120, 72, 254, 40, 40, 90, 92, 132, 0, 0, 0, 32, 18, 18, 122
        DC8 68, 39, 42, 18, 42, 36, 66, 66, 0, 0, 0, 144, 148, 148, 252, 148
        DC8 148, 148, 148, 254, 16, 16, 0, 0, 32, 24, 4, 127, 36, 36, 36, 36
        DC8 36, 124, 0, 0, 0, 0, 32, 68, 140, 96, 0, 248, 8, 8, 8, 8, 4, 4, 0
        DC8 0, 8, 124, 3, 0, 0, 63, 64, 64, 64, 64, 64, 32, 0, 0, 16, 16, 254
        DC8 144, 144, 254, 132, 132, 164, 252, 132, 0, 0, 0, 2, 65, 127, 0, 0
        DC8 127, 64, 35, 28, 22, 33, 32, 0, 0, 0, 0, 0, 0, 0, 254, 224, 0, 0, 0
        DC8 0, 0, 0, 0, 64, 64, 48, 8, 7, 0, 0, 7, 8, 48, 96, 0, 0, 0, 72, 210
        DC8 100, 24, 32, 196, 60, 132, 132, 124, 16, 96, 0, 0, 4, 71, 36, 21
        DC8 13, 127, 4, 12, 20, 36, 100, 4, 0, 0, 128, 96, 216, 132, 144, 144
        DC8 144, 254, 144, 144, 152, 144, 0, 0, 0, 0, 127, 64, 64, 68, 68, 127
        DC8 69, 68, 68, 64, 0, 0, 0, 252, 248, 0, 252, 4, 228, 20, 220, 20, 20
        DC8 230, 0, 0, 56, 7, 15, 0, 63, 128, 79, 32, 31, 16, 16, 111, 0
//  459 0x00,0x00,0x40,0x78,0x40,0x40,0x40,0xFE,0x48,0x48,0x48,0x48,0x40,0x00,
//  460 0x00,0x90,0x88,0x44,0x42,0x40,0x20,0x2F,0x10,0x08,0x04,0x03,0x00,0x00,//²½0
//  461 0x00,0x00,0xAC,0x60,0xFE,0x50,0xDC,0xE0,0xFC,0x22,0x20,0xE0,0x10,0x00,
//  462 0x00,0x01,0x44,0x2E,0x35,0x1C,0xA7,0x40,0x21,0x1E,0x3E,0x61,0x40,0x00,//Êý1
//  463 0x00,0x60,0x58,0xC6,0x30,0x00,0x38,0x48,0x4A,0x4C,0x48,0x68,0x18,0x00,
//  464 0x00,0x64,0x27,0x14,0x50,0x20,0x18,0x01,0x41,0x7E,0x05,0x09,0x31,0x00,//×Û2
//  465 0x00,0x00,0x80,0x40,0xA0,0x98,0x86,0x8C,0x90,0xE0,0xC0,0xC0,0x80,0x00,
//  466 0x00,0x00,0x00,0x7E,0x24,0x24,0x24,0x24,0x24,0x3C,0x00,0x00,0x00,0x00,//ºÏ3
//  467 0x00,0x20,0x18,0xC4,0x32,0x20,0xFC,0x54,0x54,0x54,0x54,0xFC,0x00,0x00,
//  468 0x00,0x02,0x01,0x7F,0x04,0x05,0x0C,0x35,0x45,0x45,0x7F,0x04,0x06,0x00,//µÃ4
//  469 0x00,0x00,0x80,0xE0,0x98,0x84,0x80,0x80,0x8E,0xB0,0xC0,0x80,0x80,0x00,
//  470 0x00,0x81,0x40,0x20,0x10,0x0F,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//·Ö5
//  471 0x00,0x00,0x10,0xFE,0x90,0x90,0xF0,0x8E,0x90,0xF4,0x88,0x90,0x88,0x00,
//  472 0x00,0x02,0x41,0x7F,0x00,0x00,0x7F,0x24,0x24,0x3F,0x24,0x24,0x24,0x00,//ÍÆ6
//  473 0x00,0xA0,0x98,0xE6,0xAA,0xB8,0xA4,0xD8,0x4C,0x4A,0x78,0xC8,0x00,0x00,
//  474 0x00,0x10,0x0C,0xFF,0x02,0x04,0x00,0x7F,0x4A,0x4A,0x4A,0x7F,0x00,0x00,//Ïä7
//  475 0x00,0x80,0x80,0x84,0x84,0x84,0x84,0xE4,0x94,0x8C,0x84,0x84,0x80,0x00,
//  476 0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,//×Ó8
//  477 0x00,0x10,0xC8,0x26,0x48,0x88,0x94,0xA8,0xA6,0x28,0x28,0xE4,0x00,0x00,
//  478 0x00,0x00,0x7F,0x00,0x00,0x1F,0x14,0x14,0x1F,0x00,0x40,0x7F,0x00,0x00,//¼ò9
//  479 0x00,0x00,0x00,0xF0,0x52,0x5C,0xF0,0x50,0x5C,0x52,0xF0,0x00,0x00,0x00,
//  480 0x00,0x08,0x0C,0x0B,0x0A,0x0A,0xFF,0x0A,0x0A,0x0A,0x0B,0x08,0x08,0x00,//µ¥10
//  481 0x00,0x00,0x18,0x28,0x0A,0xFC,0x08,0x08,0xFC,0x8A,0x78,0x08,0x80,0x00,
//  482 0x00,0x01,0x01,0x3D,0x53,0x52,0x53,0x53,0x52,0x52,0x3F,0x01,0x00,0x00,//ÆÕ11
//  483 0x00,0x40,0x4C,0xC0,0x00,0xF0,0x92,0x92,0xFA,0x9A,0x94,0xF0,0x00,0x00,
//  484 0x00,0x20,0x10,0x1F,0x20,0x3F,0x42,0x42,0x5F,0x42,0x42,0x5F,0x40,0x00,//Í¨12
//  485 0x00,0x00,0xFC,0x24,0x24,0xA4,0x64,0xBC,0x24,0x24,0x24,0xFE,0x00,0x00,
//  486 0x00,0x00,0x7F,0x48,0x46,0x41,0x60,0x5F,0x41,0x42,0x44,0x7F,0x00,0x00,//À§13
//  487 0x00,0x20,0xC8,0x08,0xE8,0x98,0x40,0xFC,0x92,0xF2,0x9C,0x90,0x90,0x00,
//  488 0x00,0x30,0x08,0x07,0x05,0x19,0x00,0x7F,0x44,0x3F,0x44,0x44,0x24,0x00,//ÄÑ14
//  489 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  490 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//¿Õ°×15
//  491 0x00,0x00,0x80,0x40,0x20,0x10,0x78,0x40,0x40,0x40,0x40,0xC0,0x00,0x00,
//  492 0x00,0x00,0x01,0x02,0x04,0x08,0x1E,0x02,0x02,0x02,0x02,0x03,0x00,0x00,//¼ýÍ·16
//  493 0x00,0xF8,0x88,0x88,0xF8,0x20,0xA0,0x20,0x20,0x20,0xFE,0x20,0x00,0x00,
//  494 0x00,0x3F,0x08,0x08,0x1F,0x00,0x00,0x03,0x00,0x40,0x3F,0x00,0x00,0x00,//Ê±17
//  495 0x00,0x00,0xF8,0x04,0x00,0xE4,0x24,0x24,0xE4,0x04,0x04,0xFC,0x00,0x00,
//  496 0x00,0x00,0x7F,0x00,0x00,0x0F,0x09,0x09,0x0F,0x00,0x40,0x7F,0x00,0x00,//¼ä18
//  497 0x00,0x00,0xFC,0x24,0xFC,0x00,0xF0,0x10,0x10,0xFE,0x10,0xE0,0x10,0x00,
//  498 0x00,0x78,0x07,0x01,0x7F,0x00,0x03,0x01,0x01,0x7F,0x01,0x01,0x00,0x00,//Ö×19
//  499 0x00,0x00,0x00,0x80,0x40,0x30,0x0C,0x04,0xC0,0x00,0x00,0x00,0x00,0x00,
//  500 0x00,0x02,0x01,0x20,0x30,0x2C,0x22,0x21,0x10,0x14,0x18,0x70,0x00,0x00,//Ã´20
//  501 0x00,0x00,0xFC,0x04,0x44,0xA4,0x24,0x24,0xC4,0x04,0x04,0xFC,0x00,0x00,
//  502 0x00,0x00,0x7F,0x20,0x20,0x23,0x22,0x22,0x23,0x20,0x20,0x7F,0x00,0x00,//»Ø21
//  503 0x00,0x00,0x04,0xF4,0x54,0x54,0x54,0xFE,0x54,0x54,0x74,0x04,0x04,0x00,
//  504 0x00,0x04,0x04,0x15,0x15,0x55,0x75,0x1F,0x15,0x15,0x1F,0x04,0x02,0x00,//ÊÂ22
//  505 0x00,0x80,0x40,0x30,0x00,0x00,0xFF,0x00,0x00,0x10,0x20,0x40,0x80,0x00,
//  506 0x01,0x00,0x00,0x00,0x20,0x20,0x3F,0x00,0x00,0x00,0x00,0x00,0x01,0x00,//Ð¡23
//  507 0x00,0xC0,0x00,0x00,0xF0,0x01,0x02,0x0C,0x00,0x00,0x40,0x80,0x00,0x00,
//  508 0x04,0x03,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x38,0x00,0x01,0x06,0x00,//ÐÄ24
//  509 0xFC,0x04,0x04,0xFC,0x20,0x24,0xFC,0x22,0x20,0xFF,0x20,0xA2,0x2C,0x00,
//  510 0x07,0x02,0x02,0x07,0x22,0x22,0x3F,0x01,0x20,0x11,0x0E,0x13,0x3C,0x00,//Å¶25
//  511 0x40,0x42,0xCC,0x00,0x02,0x82,0x42,0x22,0xF2,0x0E,0x22,0x42,0x82,0x00,
//  512 0x20,0x10,0x0F,0x10,0x21,0x20,0x20,0x20,0x2F,0x20,0x20,0x20,0x21,0x00,//»¹26
//  513 0x28,0xAA,0xFA,0x0A,0xFE,0x09,0xF9,0x49,0xA8,0x00,0xF8,0x00,0xFF,0x00,
//  514 0x11,0x08,0x05,0x02,0x3F,0x02,0x04,0x09,0x11,0x00,0x23,0x20,0x3F,0x00,//Ê£27
//  515 0x00,0x00,0x10,0xFE,0x90,0x90,0x08,0x08,0x08,0x08,0x08,0x08,0xF0,0x00,
//  516 0x00,0x02,0x41,0x7F,0x00,0x00,0x21,0x21,0x21,0x21,0x21,0x21,0x1E,0x00,//É¨28
//  517 0x00,0x30,0x08,0x2C,0x2C,0x0C,0xFC,0x0C,0x2C,0xAC,0x2A,0x28,0x18,0x00,
//  518 0x00,0x00,0x00,0x7E,0x4A,0x4A,0x3E,0x4A,0x4A,0x4A,0x7E,0x00,0x00,0x00,//À×29
//  519 0x00,0xF8,0x24,0x24,0xFC,0x10,0xD0,0x30,0xD2,0xCC,0x30,0xD0,0x08,0x00,
//  520 0x40,0x3F,0x42,0x42,0x7F,0x00,0x7F,0x48,0x44,0x43,0x4C,0x7F,0x00,0x00,//ÄÔ30
//  521 0x00,0x00,0x88,0xA8,0xA8,0xA8,0xBC,0xAA,0xA8,0xA8,0xB8,0x8C,0x88,0x00,
//  522 0x00,0x81,0x40,0x40,0x38,0x06,0x02,0x02,0x3E,0x42,0x40,0x41,0x78,0x00,//¿Ç31
//  523 0x00,0x10,0x20,0xF8,0x08,0x88,0x68,0x7A,0xAC,0xA8,0x68,0x08,0x08,0x00,
//  524 0x00,0x42,0x31,0x0F,0x05,0x04,0x02,0x26,0x25,0x6A,0x02,0x04,0x04,0x00,//ÌÛ32
//  525 0xFC,0xFC,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0xFC,0xFC,0x00,0x00,
//  526 0x3F,0x3F,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3F,0x3F,0x00,0x00,//Æå33
//  527 0x00,0x00,0x08,0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x88,0x08,0x00,0x00,
//  528 0x00,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x00,//Îå34
//  529 0x00,0x00,0x08,0x08,0x08,0x08,0x08,0xC8,0x48,0x28,0x18,0x08,0x00,0x00,
//  530 0x00,0x01,0x01,0x01,0x01,0x41,0x41,0x7F,0x01,0x01,0x01,0x01,0x01,0x01,//×Ó35
//  531 0x00,0x20,0xA0,0xFC,0xA0,0x20,0x10,0xFC,0x50,0x50,0x50,0xFC,0x10,0x10,
//  532 0x00,0x06,0x01,0x7F,0x40,0x4B,0x28,0x1F,0x09,0x09,0x19,0x1F,0x68,0x08,//Æå36
//  533 0x00,0x00,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,
//  534 0x00,0x00,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,//Æå37
//  535 0x00,0x80,0x80,0x90,0x90,0x90,0xFC,0x92,0x90,0x90,0x88,0x80,0x80,0x00,
//  536 0x00,0x20,0x10,0x08,0x04,0x02,0x7F,0x00,0x03,0x0C,0x18,0x30,0x00,0x00,//Î´38
//  537 0x00,0x20,0x18,0x48,0x48,0x48,0x4A,0x4C,0x48,0x28,0x48,0x30,0x00,0x00,
//  538 0x00,0x80,0x41,0x21,0x39,0x06,0x01,0x01,0x7E,0x41,0x41,0x41,0x70,0x00,//Íê39
//  539 0x00,0x00,0xF0,0x10,0x10,0x10,0x10,0x7E,0x92,0x12,0x1C,0xD0,0x10,0x00,
//  540 0x00,0x60,0x1F,0x11,0x11,0x3F,0x41,0x20,0x17,0x1C,0x33,0x60,0x70,0x00,//³É39
//  541 0x00,0x80,0x80,0x80,0x80,0x80,0xFE,0x88,0x88,0x88,0x88,0x80,0x40,0x00,
//  542 0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x02,0x02,0x04,0x0C,0x08,0x00,0x00,//¿¨40
//  543 0x00,0x00,0x98,0x48,0x38,0x08,0xCA,0x8C,0x18,0x28,0x48,0xD8,0x08,0x00,
//  544 0x00,0x08,0x04,0x04,0x7E,0x45,0x44,0x44,0x45,0x7E,0x06,0x04,0x04,0x00,//ÈÝ41
//  545 0x00,0x40,0x40,0xFE,0xDA,0xDA,0x5A,0xDA,0xDA,0xDA,0xFE,0x40,0x60,0x00,
//  546 0x00,0x00,0x40,0x5F,0x5A,0x5A,0x7F,0x5A,0x5A,0x5A,0x5F,0x40,0x40,0x00,//Á¿42
//  547 0x00,0x00,0x04,0xE4,0x24,0x24,0xE4,0x24,0x04,0x04,0xF8,0x04,0x04,0x00,
//  548 0x00,0x00,0x00,0x07,0x04,0x04,0x07,0x00,0x00,0x40,0x3F,0x00,0x00,0x00,//¿É43
//  549 0x00,0x00,0xFE,0x24,0x24,0x24,0x24,0xFC,0x24,0x24,0x24,0xFE,0x00,0x00,
//  550 0x00,0x60,0x1F,0x02,0x02,0x02,0x02,0x7F,0x02,0x02,0x42,0x7F,0x00,0x00,//ÓÃ44
//  551 0x00,0x00,0x00,0xF0,0x12,0x1C,0x10,0x10,0x1C,0x12,0xF0,0x00,0x00,0x00,
//  552 0x00,0x20,0x18,0x03,0x7D,0x42,0x45,0x4D,0x41,0x79,0x07,0x08,0x10,0x00,//×Ü45
//  553 0x00,0x20,0xB8,0x88,0x48,0x30,0x0A,0x0C,0x08,0x28,0x48,0xF0,0x08,0x00,
//  554 0x00,0x41,0x40,0x40,0x41,0x41,0x7E,0x41,0x41,0x41,0x41,0x40,0x40,0x00,//¿Õ46
//  555 0x00,0x00,0x90,0xFE,0x90,0x60,0x10,0x1E,0xEA,0xE8,0x18,0x08,0x00,0x00,
//  556 0x00,0x06,0x01,0x7F,0x04,0x02,0xFE,0x45,0x44,0x44,0x7D,0x02,0x02,0x00,//¸ñ47
//  557 0x00,0xFC,0x04,0xFC,0x04,0x24,0xA8,0xB8,0xA6,0xA8,0xB8,0xA4,0x20,0x00,
//  558 0x00,0x7F,0x04,0x08,0x17,0x18,0x17,0x16,0xFA,0x16,0x16,0x1F,0x10,0x00,//ÕÏ48
//  559 0x00,0x04,0xF4,0x4C,0x84,0x04,0x00,0x7C,0x54,0x54,0x54,0x7E,0x80,0x00,
//  560 0x00,0x03,0x3F,0x10,0x1F,0x00,0x04,0x0D,0x15,0x45,0x45,0x3F,0x02,0x00,//°­49
//  561 0x00,0xA0,0x98,0xE6,0xAA,0xB8,0xA4,0xD8,0x4C,0x4A,0x78,0xC8,0x00,0x00,
//  562 0x00,0x10,0x0C,0xFF,0x02,0x04,0x00,0x7F,0x4A,0x4A,0x4A,0x7F,0x00,0x00,//Ïä50
//  563 0x00,0x80,0x80,0x84,0x84,0x84,0x84,0xE4,0x94,0x8C,0x84,0x84,0x80,0x00,
//  564 0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,//×Ó51
//  565 0x00,0x60,0x58,0xC6,0x60,0x50,0x20,0x3C,0xCA,0xC8,0x38,0x08,0x00,0x00,
//  566 0x00,0x64,0x27,0x12,0x12,0x02,0x02,0x13,0x12,0x24,0x61,0x02,0x02,0x00,//ÖÕ52
//  567 0x00,0x00,0x00,0xC0,0x40,0x40,0x7E,0x4A,0x48,0x48,0xC8,0x08,0x00,0x00,
//  568 0x00,0x40,0x70,0x0F,0x04,0x24,0x04,0x04,0x24,0x04,0x07,0x30,0x40,0x00,//µã53
//  569 0x00,0x00,0x00,0xF0,0x90,0x88,0x96,0x90,0x90,0x90,0xF8,0x00,0x00,0x00,
//  570 0x00,0x00,0x00,0x7F,0x44,0x44,0x44,0x44,0x44,0x44,0x7F,0x00,0x00,0x00,//×Ô54
//  571 0x00,0x60,0x58,0x50,0xFE,0x50,0x50,0x50,0x00,0xF8,0x00,0x00,0xFE,0x00,
//  572 0x00,0x1E,0x01,0x01,0x7F,0x11,0x31,0x0F,0x00,0x0F,0x40,0x40,0x3F,0x00,//ÖÆ55
//  573 0x00,0x00,0x00,0x44,0x64,0x54,0xCC,0x44,0x44,0xA2,0x12,0x02,0x00,0x00,
//  574 0x00,0x40,0x20,0x12,0x0F,0x0B,0x42,0x7E,0x02,0x0A,0x11,0x33,0x60,0x00,//Ïµ56
//  575 0x00,0x60,0x50,0xCE,0x60,0x10,0x88,0x48,0x3A,0x8C,0x88,0xC8,0x88,0x00,
//  576 0x00,0x22,0x13,0x12,0x92,0x42,0x41,0x3D,0x03,0x00,0x7F,0x40,0x71,0x00,//Í³57
//  577 0x00,0x40,0x44,0xF8,0x40,0x80,0xF8,0x40,0xFE,0x20,0x20,0xF0,0x00,0x00,
//  578 0x00,0x20,0x10,0x1F,0x08,0x08,0x7F,0x40,0x4F,0x40,0x44,0x47,0x78,0x00,//µØ58
//  579 0x00,0x00,0xFC,0x42,0x22,0x1C,0xEA,0xCA,0x32,0x02,0x02,0x02,0xFC,0x00,
//  580 0x00,0x00,0x7F,0x22,0x22,0x29,0x2A,0x2A,0x31,0x21,0x22,0x20,0x3F,0x00,//Í¼1
//  581 0x00,0x60,0x58,0xC4,0x30,0xC0,0x38,0x28,0x2A,0x2C,0x28,0x38,0x00,0x00,
//  582 0x00,0x16,0x13,0x52,0x32,0x0E,0x7F,0x09,0x3F,0x09,0x7F,0x49,0x7F,0x00,//±à2
//  583 0x00,0xC0,0xB8,0xF6,0x90,0xC0,0xEC,0x54,0x54,0x54,0xFC,0x40,0x40,0x00,
//  584 0x00,0x09,0x08,0x7F,0x04,0x04,0x1E,0x15,0x15,0x15,0x7F,0x10,0x08,0x00,//¼­3
//  585 0x00,0x80,0xBC,0xA4,0xA4,0xBC,0xC0,0x80,0xBC,0xE4,0xA4,0x9C,0x80,0x00,
//  586 0x00,0x08,0x04,0x3C,0x26,0x3D,0x00,0x7C,0x25,0x26,0x26,0x7C,0x04,0x00,//Æ÷62
//  587 0x00,0x00,0x00,0x44,0x64,0x54,0xCC,0x44,0x44,0xA2,0x12,0x02,0x00,0x00,
//  588 0x00,0x40,0x20,0x12,0x0F,0x0B,0x42,0x7E,0x02,0x0A,0x11,0x33,0x60,0x00,//Ïµ63
//  589 0x00,0x60,0x50,0xCE,0x60,0x10,0x88,0x48,0x3A,0x8C,0x88,0xC8,0x88,0x00,
//  590 0x00,0x22,0x13,0x12,0x92,0x42,0x41,0x3D,0x03,0x00,0x7F,0x40,0x71,0x00,//Í³64
//  591 0x00,0x00,0xFC,0x42,0x22,0x1C,0xEA,0xCA,0x32,0x02,0x02,0x02,0xFC,0x00,
//  592 0x00,0x00,0x7F,0x22,0x22,0x29,0x2A,0x2A,0x31,0x21,0x22,0x20,0x3F,0x00,//Í¼0
//  593 0x00,0x84,0x84,0xFC,0x84,0x84,0xFC,0x44,0x24,0x10,0x08,0xC4,0x40,0x00,
//  594 0x00,0x40,0x38,0x07,0x00,0x00,0x3F,0x00,0x42,0x22,0x11,0x08,0x04,0x00,//ÐÎ1
//  595 0x00,0x00,0x88,0x48,0xB0,0x08,0x0A,0x0C,0x88,0xA8,0x48,0xC8,0x08,0x00,
//  596 0x00,0x81,0x40,0x40,0x20,0x23,0x1C,0x1C,0x23,0x20,0x40,0x40,0x40,0x00,//½»2
//  597 0x00,0x00,0x04,0x04,0xE4,0x58,0x44,0x44,0x44,0xE4,0x04,0x04,0x00,0x00,
//  598 0x00,0x40,0x40,0x40,0x47,0x44,0x44,0x44,0x64,0x5F,0x40,0x40,0x60,0x00,//»¥3
//  599 0x00,0x00,0x00,0x44,0x64,0x54,0xCC,0x44,0x44,0xA2,0x12,0x02,0x00,0x00,
//  600 0x00,0x40,0x20,0x12,0x0F,0x0B,0x42,0x7E,0x02,0x0A,0x11,0x33,0x60,0x00,//Ïµ4
//  601 0x00,0x60,0x50,0xCE,0x60,0x10,0x88,0x48,0x3A,0x8C,0x88,0xC8,0x88,0x00,
//  602 0x00,0x22,0x13,0x12,0x92,0x42,0x41,0x3D,0x03,0x00,0x7F,0x40,0x71,0x00,//Í³5
//  603 0x00,0x00,0x10,0xFE,0x90,0x10,0x2C,0x50,0x50,0x48,0x48,0x44,0x60,0x00,
//  604 0x00,0x02,0x42,0x7F,0x00,0x00,0x00,0x3E,0x2A,0x2A,0x2A,0x7F,0x00,0x00,//Ö¸6
//  605 0x00,0x00,0x00,0xFE,0x92,0x92,0x92,0x92,0x92,0x92,0x9E,0xE0,0x00,0x00,
//  606 0x00,0x00,0x04,0x04,0x0C,0x14,0x04,0x44,0x44,0x3F,0x04,0x02,0x00,0x00,//µ¼7
//  607 0x00,0x00,0x40,0x50,0x50,0x50,0x7E,0x90,0x50,0x68,0x58,0x44,0x40,0x00,
//  608 0x00,0x10,0x08,0x08,0x04,0x7E,0x49,0x48,0x44,0x46,0x42,0x78,0x00,0x00,//ÀÏ8
//  609 0x00,0xF0,0x00,0xFC,0x02,0x04,0xE4,0x24,0x24,0xFC,0x24,0x24,0xE4,0x00,
//  610 0x00,0x43,0x30,0x0F,0x00,0x00,0x0F,0x00,0x00,0x7F,0x08,0x10,0x0F,0x00,//Ê¦9
//  611 0x00,0x88,0x88,0x98,0x78,0x48,0xFE,0x28,0x28,0x5A,0x5C,0x84,0x00,0x00,
//  612 0x00,0x20,0x12,0x12,0x7A,0x44,0x27,0x2A,0x12,0x2A,0x24,0x42,0x42,0x00,//ôÃ10
//  613 0x00,0x00,0x90,0x94,0x94,0xFC,0x94,0x94,0x94,0x94,0xFE,0x10,0x10,0x00,
//  614 0x00,0x20,0x18,0x04,0x7F,0x24,0x24,0x24,0x24,0x24,0x7C,0x00,0x00,0x00,//¾ý11
//  615 0x00,0x20,0x44,0x8C,0x60,0x00,0xF8,0x08,0x08,0x08,0x08,0x04,0x04,0x00,
//  616 0x00,0x08,0x7C,0x03,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x40,0x20,0x00,//»ã12
//  617 0x00,0x10,0x10,0xFE,0x90,0x90,0xFE,0x84,0x84,0xA4,0xFC,0x84,0x00,0x00,
//  618 0x00,0x02,0x41,0x7F,0x00,0x00,0x7F,0x40,0x23,0x1C,0x16,0x21,0x20,0x00,//±¨13
//  619 0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,
//  620 0x00,0x40,0x40,0x30,0x08,0x07,0x00,0x00,0x07,0x08,0x30,0x60,0x00,0x00,//ÈË14
//  621 0x00,0x48,0xD2,0x64,0x18,0x20,0xC4,0x3C,0x84,0x84,0x7C,0x10,0x60,0x00,
//  622 0x00,0x04,0x47,0x24,0x15,0x0D,0x7F,0x04,0x0C,0x14,0x24,0x64,0x04,0x00,//Áº15
//  623 0x00,0x80,0x60,0xD8,0x84,0x90,0x90,0x90,0xFE,0x90,0x90,0x98,0x90,0x00,
//  624 0x00,0x00,0x00,0x7F,0x40,0x40,0x44,0x44,0x7F,0x45,0x44,0x44,0x40,0x00,//¼Ñ16
//  625 0x00,0x00,0xFC,0xF8,0x00,0xFC,0x04,0xE4,0x14,0xDC,0x14,0x14,0xE6,0x00,
//  626 0x00,0x38,0x07,0x0F,0x00,0x3F,0x80,0x4F,0x20,0x1F,0x10,0x10,0x6F,0x00,//Ë³17
//  627 };
//  628 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  629 const unsigned char F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  630 {
//  631   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  632   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  633   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  634   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  635   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  636   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  637   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  638   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  639   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  640   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  641   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  642   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  643   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  644   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  645   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  646   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  647   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  648   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  649   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  650   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  651   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  652   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  653   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  654   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  655   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  656   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  657   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  658   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  659   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  660   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  661   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  662   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  663   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  664   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  665   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  666   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  667   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  668   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  669   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  670   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  671   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  672   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  673   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  674   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  675   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  676   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  677   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  678   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  679   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  680   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  681   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  682   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  683   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  684   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  685   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  686   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  687   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  688   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  689   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  690   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  691   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  692   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  693   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  694   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  695   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  696   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  697   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  698   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  699   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  700   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  701   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  702   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  703   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  704   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  705   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  706   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  707   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  708   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  709   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  710   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  711   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  712   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  713   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  714   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  715   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  716   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  717   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  718   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  719   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  720   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  721   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  722   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  723   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  724   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  725   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  726 
//  727 };
//  728 
//  729 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  730 void LCD_WrDat(unsigned char dat)
//  731 {
LCD_WrDat:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  732 	unsigned char i=8;
        MOVS     R5,#+8
//  733 	// //LCD_CS=0;;
//  734 	//LCD_DC=1;;
//  735   LPLD_GPIO_Output_b(LCD_PORT,LCD_DC,1);;
        MOVS     R2,#+1
        MOVS     R1,#+3
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  736   //LCD_SCL=0;;
//  737   LPLD_GPIO_Output_b(LCD_PORT,LCD_SCL,0);;
        MOVS     R2,#+0
        MOVS     R1,#+0
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
        B.N      ??LCD_WrDat_0
//  738   // //;;
//  739   while(i--)
//  740   {
//  741     if(dat&0x80){
//  742       //LCD_SDA=1;
//  743       LPLD_GPIO_Output_b(LCD_PORT,LCD_SDA,1);
//  744     }
//  745     else{
//  746       //LCD_SDA=0;
//  747       LPLD_GPIO_Output_b(LCD_PORT,LCD_SDA,0);
??LCD_WrDat_1:
        MOVS     R2,#+0
        MOVS     R1,#+1
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  748     }
//  749     //LCD_SCL=1;
//  750     LPLD_GPIO_Output_b(LCD_PORT,LCD_SCL,1);
??LCD_WrDat_2:
        MOVS     R2,#+1
        MOVS     R1,#+0
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  751     ;;;
//  752 		//;;
//  753     //LCD_SCL=0;;
//  754     LPLD_GPIO_Output_b(LCD_PORT,LCD_SCL,0);;
        MOVS     R2,#+0
        MOVS     R1,#+0
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  755     dat<<=1;
        LSLS     R4,R4,#+1
??LCD_WrDat_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??LCD_WrDat_3
        LSLS     R0,R4,#+24
        BPL.N    ??LCD_WrDat_1
        MOVS     R2,#+1
        MOVS     R1,#+1
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
        B.N      ??LCD_WrDat_2
//  756   }
//  757 	//LCD_CS=1;
//  758 }
??LCD_WrDat_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  759 void LCD_WrCmd(unsigned char cmd)
//  760 {
LCD_WrCmd:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  761 	unsigned char i=8;
        MOVS     R5,#+8
//  762 
//  763 	// //LCD_CS=0;;
//  764 	//LCD_DC=0;;
//  765   LPLD_GPIO_Output_b(LCD_PORT,LCD_DC,0);;
        MOVS     R2,#+0
        MOVS     R1,#+3
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  766   //LCD_SCL=0;;
//  767   LPLD_GPIO_Output_b(LCD_PORT,LCD_SCL,0);;
        MOVS     R2,#+0
        MOVS     R1,#+0
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
        B.N      ??LCD_WrCmd_0
//  768   // //;;
//  769   while(i--)
//  770   {
//  771     if(cmd&0x80){
//  772       //LCD_SDA=1;
//  773       LPLD_GPIO_Output_b(LCD_PORT,LCD_SDA,1);
//  774     }
//  775     else{
//  776      // LCD_SDA=0;;
//  777       LPLD_GPIO_Output_b(LCD_PORT,LCD_SDA,0);;
??LCD_WrCmd_1:
        MOVS     R2,#+0
        MOVS     R1,#+1
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  778     }
//  779     //LCD_SCL=1;;
//  780     LPLD_GPIO_Output_b(LCD_PORT,LCD_SCL,1);;
??LCD_WrCmd_2:
        MOVS     R2,#+1
        MOVS     R1,#+0
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  781     //LCD_SCL=0;;
//  782     LPLD_GPIO_Output_b(LCD_PORT,LCD_SCL,0);;
        MOVS     R2,#+0
        MOVS     R1,#+0
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  783     cmd<<=1;;
        LSLS     R4,R4,#+1
??LCD_WrCmd_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??LCD_WrCmd_3
        LSLS     R0,R4,#+24
        BPL.N    ??LCD_WrCmd_1
        MOVS     R2,#+1
        MOVS     R1,#+1
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
        B.N      ??LCD_WrCmd_2
//  784   }
//  785 	//LCD_CS=1;
//  786 }
??LCD_WrCmd_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  787 void LCD_Set_Pos(unsigned char x, unsigned char y)
//  788 {
LCD_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  789   LCD_WrCmd(0xb0+y);
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  790   LCD_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  791   LCD_WrCmd((x&0x0f)|0x01);
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  792 }
        POP      {R4,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  793 void LCD_Fill(unsigned char bmp_dat)
//  794 {
LCD_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  795 	unsigned char y,x;
//  796 
//  797 	for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??LCD_Fill_0
//  798 	{
//  799 		LCD_WrCmd(0xb0+y);
//  800 		LCD_WrCmd(0x01);
//  801 		LCD_WrCmd(0x10);
//  802 		for(x=0;x<X_WIDTH;x++)
//  803 			LCD_WrDat(bmp_dat);
??LCD_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R6,R6,#+1
??LCD_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BLT.N    ??LCD_Fill_1
        ADDS     R5,R5,#+1
??LCD_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??LCD_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R6,#+0
        B.N      ??LCD_Fill_2
//  804 	}
//  805 }
??LCD_Fill_3:
        POP      {R4-R6,PC}       ;; return
//  806 
//  807 /*void LCD_kuan(int kuan)
//  808 {
//  809 	unsigned char y;
//  810         int x;
//  811 	for(y=5;y<7;y++)
//  812 	{
//  813 		LCD_WrCmd(0xb0+y);
//  814 		LCD_WrCmd(0x01);
//  815 		LCD_WrCmd(0x10);
//  816 		for(x=0;x<kuan;x++)//X_WIDTH
//  817 			LCD_WrDat(0xff);
//  818 	}
//  819 }*/
//  820 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  821 void LCD_CLS(void)
//  822 {
LCD_CLS:
        PUSH     {R3-R5,LR}
//  823 	unsigned char y,x;
//  824 	for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??LCD_CLS_0
//  825 	{
//  826 		LCD_WrCmd(0xb0+y);
//  827 		LCD_WrCmd(0x01);
//  828 		LCD_WrCmd(0x10);
//  829 		for(x=0;x<X_WIDTH;x++)//X_WIDTH
//  830 			LCD_WrDat(0);
??LCD_CLS_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R5,R5,#+1
??LCD_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??LCD_CLS_1
        ADDS     R4,R4,#+1
??LCD_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??LCD_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R5,#+0
        B.N      ??LCD_CLS_2
//  831 	}
//  832 }
??LCD_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  833 void LCD_DLY_ms(unsigned int ms)
//  834 {
LCD_DLY_ms:
        B.N      ??LCD_DLY_ms_0
//  835   unsigned int a;
//  836   while(ms)
//  837   {
//  838     a=1335;
??LCD_DLY_ms_1:
        MOVW     R1,#+1335
//  839     while(a--);
??LCD_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        CMP      R2,#+0
        BNE.N    ??LCD_DLY_ms_2
//  840     ms--;
        SUBS     R0,R0,#+1
//  841   }
??LCD_DLY_ms_0:
        CMP      R0,#+0
        BNE.N    ??LCD_DLY_ms_1
//  842   return;
        BX       LR               ;; return
//  843 }

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  844 void LCD_Init(void)
//  845 {
LCD_Init:
        PUSH     {R7,LR}
//  846 	//LCD_SCL=1;
//  847   LPLD_GPIO_Output_b(LCD_PORT,LCD_SCL,1);
        MOVS     R2,#+1
        MOVS     R1,#+0
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  848 	// //LCD_CS=1;	//ÃÂ¤ÃÃSLKÂºÃSSÃÂªÂ¸ÃÂµÃ§ÃÂ½
//  849 	//LCD_RST=0;
//  850   LPLD_GPIO_Output_b(LCD_PORT,LCD_RST,0);
        MOVS     R2,#+0
        MOVS     R1,#+2
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  851 	LCD_DLY_ms(50);
        MOVS     R0,#+50
        BL       LCD_DLY_ms
//  852 	//LCD_RST=1;
//  853   LPLD_GPIO_Output_b(LCD_PORT,LCD_RST,1);
        MOVS     R2,#+1
        MOVS     R1,#+2
        LDR.W    R0,??DataTable18  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  854 
//  855 	//Â´ÃÃÃÂµÃ§ÂµÂ½ÃÃÃÃ¦Â¿ÂªÃÂ¼Â³ÃµÃÂ¼Â»Â¯ÃÂªÃÃÃÃ£Â¹Â»ÂµÃÃÂ±Â¼Ã¤Â£Â¬Â¼Â´ÂµÃÂ´Ã½RCÂ¸Â´ÃÂ»ÃÃªÂ±Ã
//  856 
//  857   LCD_WrCmd(0xae);//--turn off oled panel
        MOVS     R0,#+174
        BL       LCD_WrCmd
//  858   LCD_WrCmd(0x00);//---set low column address
        MOVS     R0,#+0
        BL       LCD_WrCmd
//  859   LCD_WrCmd(0x10);//---set high column address
        MOVS     R0,#+16
        BL       LCD_WrCmd
//  860   LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       LCD_WrCmd
//  861   LCD_WrCmd(0x81);//--set contrast control register
        MOVS     R0,#+129
        BL       LCD_WrCmd
//  862   LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
        MOVS     R0,#+207
        BL       LCD_WrCmd
//  863   LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0ÃÃ³ÃÃÂ·Â´ÃÃ 0xa1ÃÃ½Â³Â£
        MOVS     R0,#+161
        BL       LCD_WrCmd
//  864   LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0ÃÃÃÃÂ·Â´ÃÃ 0xc8ÃÃ½Â³Â£
        MOVS     R0,#+200
        BL       LCD_WrCmd
//  865   LCD_WrCmd(0xa6);//--set normal display
        MOVS     R0,#+166
        BL       LCD_WrCmd
//  866   LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        MOVS     R0,#+168
        BL       LCD_WrCmd
//  867   LCD_WrCmd(0x3f);//--1/64 duty
        MOVS     R0,#+63
        BL       LCD_WrCmd
//  868   LCD_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       LCD_WrCmd
//  869   LCD_WrCmd(0x00);//-not offset
        MOVS     R0,#+0
        BL       LCD_WrCmd
//  870   LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        MOVS     R0,#+213
        BL       LCD_WrCmd
//  871   LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       LCD_WrCmd
//  872   LCD_WrCmd(0xd9);//--set pre-charge period
        MOVS     R0,#+217
        BL       LCD_WrCmd
//  873   LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       LCD_WrCmd
//  874   LCD_WrCmd(0xda);//--set com pins hardware configuration
        MOVS     R0,#+218
        BL       LCD_WrCmd
//  875   LCD_WrCmd(0x12);
        MOVS     R0,#+18
        BL       LCD_WrCmd
//  876   LCD_WrCmd(0xdb);//--set vcomh
        MOVS     R0,#+219
        BL       LCD_WrCmd
//  877   LCD_WrCmd(0x40);//Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       LCD_WrCmd
//  878   LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       LCD_WrCmd
//  879   LCD_WrCmd(0x02);//
        MOVS     R0,#+2
        BL       LCD_WrCmd
//  880   LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
        MOVS     R0,#+141
        BL       LCD_WrCmd
//  881   LCD_WrCmd(0x14);//--set(0x10) disable
        MOVS     R0,#+20
        BL       LCD_WrCmd
//  882   LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        MOVS     R0,#+164
        BL       LCD_WrCmd
//  883   LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7)
        MOVS     R0,#+166
        BL       LCD_WrCmd
//  884   LCD_WrCmd(0xaf);//--turn on oled panel
        MOVS     R0,#+175
        BL       LCD_WrCmd
//  885   LCD_Fill(0x00);  //Â³ÃµÃÂ¼ÃÃ¥ÃÃ
        MOVS     R0,#+0
        BL       LCD_Fill
//  886   LCD_Set_Pos(0,0);
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       LCD_Set_Pos
//  887 }
        POP      {R0,PC}          ;; return
//  888 
//  889 //==============================================================
//  890 //ÂºÂ¯ÃÃ½ÃÃ»Â£ÂºLCD_P6x8Str(unsigned char x,unsigned char y,unsigned char *p)
//  891 //Â¹Â¦ÃÃÃÃ¨ÃÃ¶Â£ÂºÃÂ´ÃÃ«ÃÂ»ÃÃ©Â±ÃªÃÂ¼ASCIIÃÃÂ·Ã»Â´Â®
//  892 //Â²ÃÃÃ½Â£ÂºÃÃÃÂ¾ÂµÃÃÂ»ÃÃÂ£Â¨x,yÂ£Â©Â£Â¬yÃÂªÃÂ³Â·Â¶ÃÂ§0Â¡Â«7Â£Â¬ÃÂªÃÃÃÂ¾ÂµÃÃÃÂ·Ã»Â´Â®
//  893 //Â·ÂµÂ»ÃÂ£ÂºÃÃ
//  894 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  895 void LCD_P6x8Str(unsigned char x,unsigned char y,unsigned char ch[])
//  896 {
LCD_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  897   unsigned char c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P6x8Str_0
//  898   while (ch[j]!='\0')
//  899   {
//  900     c =ch[j]-32;
//  901     if(x>126){x=0;y++;}
//  902     LCD_Set_Pos(x,y);
//  903   	for(i=0;i<6;i++)
//  904   	  LCD_WrDat(F6x8[c][i]);
??LCD_P6x8Str_1:
        LDR.W    R0,??DataTable18_1
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P6x8Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??LCD_P6x8Str_1
//  905   	x+=6;
        ADDS     R4,R4,#+6
//  906   	j++;
        ADDS     R9,R9,#+1
??LCD_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P6x8Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??LCD_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P6x8Str_2
//  907   }
//  908 }
??LCD_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  909 //==============================================================
//  910 //ÂºÂ¯ÃÃ½ÃÃ»Â£ÂºLCD_P8x16Str(unsigned char x,unsigned char y,unsigned char *p)
//  911 //Â¹Â¦ÃÃÃÃ¨ÃÃ¶Â£ÂºÃÂ´ÃÃ«ÃÂ»ÃÃ©Â±ÃªÃÂ¼ASCIIÃÃÂ·Ã»Â´Â®
//  912 //Â²ÃÃÃ½Â£ÂºÃÃÃÂ¾ÂµÃÃÂ»ÃÃÂ£Â¨x,yÂ£Â©Â£Â¬yÃÂªÃÂ³Â·Â¶ÃÂ§0Â¡Â«7Â£Â¬ÃÂªÃÃÃÂ¾ÂµÃÃÃÂ·Ã»Â´Â®
//  913 //Â·ÂµÂ»ÃÂ£ÂºÃÃ
//  914 //==============================================================
//  915 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  916 void LCD_P8x16Str(unsigned char x,unsigned char y,unsigned char ch[])
//  917 {
LCD_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  918   unsigned char c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str_0
//  919 
//  920   while (ch[j]!='\0')
//  921   {
//  922     c =ch[j]-32;
//  923     if(x>120){x=0;y++;}
//  924     LCD_Set_Pos(x,y);
//  925   	for(i=0;i<8;i++)
//  926   	  LCD_WrDat(F8X16[c*16+i]);
//  927   	LCD_Set_Pos(x,y+1);
//  928   	for(i=0;i<8;i++)
//  929   	  LCD_WrDat(F8X16[c*16+i+8]);
??LCD_P8x16Str_1:
        LDR.W    R0,??DataTable18_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??LCD_P8x16Str_1
//  930   	x+=8;
        ADDS     R4,R4,#+8
//  931   	j++;
        ADDS     R9,R9,#+1
??LCD_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P8x16Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??LCD_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str_5
??LCD_P8x16Str_6:
        LDR.W    R0,??DataTable18_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        LDRB     R0,[R1, R0]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??LCD_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str_2
//  932   }
//  933 }
??LCD_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  934 
//  935 //ÃÃ¤Â³Ã¶ÂºÂºÃÃÃÃÂ·Ã»Â´Â®

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  936 void LCD_P14x16Ch(unsigned char x,unsigned char y,unsigned char N)
//  937 {
LCD_P14x16Ch:
        PUSH     {R4-R8,LR}
        MOVS     R5,R0
        MOVS     R6,R1
//  938 	unsigned char wm=0,ii = 0;
        MOVS     R4,#+0
        MOVS     R7,#+0
//  939 	unsigned int adder=28*N;
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R0,#+28
        MUL      R8,R0,R2
//  940   	LCD_Set_Pos(x , y);
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  941   	for(wm = 0;wm < 14;wm++)
        MOVS     R0,#+0
        MOVS     R4,R0
        B.N      ??LCD_P14x16Ch_0
//  942   	{
//  943   		LCD_WrDat(F14x16[adder]);
??LCD_P14x16Ch_1:
        LDR.W    R0,??DataTable18_3
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
//  944   		adder += 1;
        ADDS     R8,R8,#+1
//  945   	}
        ADDS     R4,R4,#+1
??LCD_P14x16Ch_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+14
        BLT.N    ??LCD_P14x16Ch_1
//  946   	LCD_Set_Pos(x,y + 1);
        ADDS     R1,R6,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  947   	for(wm = 0;wm < 14;wm++)
        MOVS     R4,#+0
        B.N      ??LCD_P14x16Ch_2
//  948   	{
//  949   		LCD_WrDat(F14x16[adder]);
??LCD_P14x16Ch_3:
        LDR.W    R0,??DataTable18_3
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
//  950   		adder += 1;
        ADDS     R8,R8,#+1
//  951   	}
        ADDS     R4,R4,#+1
??LCD_P14x16Ch_2:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+14
        BLT.N    ??LCD_P14x16Ch_3
//  952 }
        POP      {R4-R8,PC}       ;; return
//  953 
//  954 //·´É«

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  955 void LCD_P14x16Ch1(unsigned char x,unsigned char y,unsigned char N)
//  956 {
LCD_P14x16Ch1:
        PUSH     {R4-R8,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  957 	unsigned char wm=0,ii = 0;
        MOVS     R6,#+0
        MOVS     R8,#+0
//  958 	unsigned int adder=28*N;
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R0,#+28
        MUL      R7,R0,R2
//  959   	LCD_Set_Pos(x , y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  960   	for(wm = 0;wm < 14;wm++)
        MOVS     R0,#+0
        MOVS     R6,R0
        B.N      ??LCD_P14x16Ch1_0
//  961   	{
//  962   		LCD_WrDat(~F14x16[adder]);
??LCD_P14x16Ch1_1:
        LDR.W    R0,??DataTable18_3
        LDRB     R0,[R7, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  963   		adder += 1;
        ADDS     R7,R7,#+1
//  964   	}
        ADDS     R6,R6,#+1
??LCD_P14x16Ch1_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+14
        BLT.N    ??LCD_P14x16Ch1_1
//  965   	LCD_Set_Pos(x,y + 1);
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  966   	for(wm = 0;wm < 14;wm++)
        MOVS     R6,#+0
        B.N      ??LCD_P14x16Ch1_2
//  967   	{
//  968   		LCD_WrDat(~F14x16[adder]);
??LCD_P14x16Ch1_3:
        LDR.W    R0,??DataTable18_3
        LDRB     R0,[R7, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  969   		adder += 1;
        ADDS     R7,R7,#+1
//  970   	}
        ADDS     R6,R6,#+1
??LCD_P14x16Ch1_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+14
        BLT.N    ??LCD_P14x16Ch1_3
//  971 }
        POP      {R4-R8,PC}       ;; return
//  972 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  973 void LCD_P16x8Ch(unsigned char x,unsigned char y,unsigned char N)
//  974 {
LCD_P16x8Ch:
        PUSH     {R4-R6,LR}
//  975   unsigned char wm=0,ii = 0;
        MOVS     R4,#+0
        MOVS     R5,#+0
//  976   unsigned int adder=8*N;
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        LSLS     R6,R2,#+3
//  977     LCD_Set_Pos(x , y);
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  978     for(wm = 0;wm < 8;wm++)
        MOVS     R0,#+0
        MOVS     R4,R0
        B.N      ??LCD_P16x8Ch_0
//  979     {
//  980       LCD_WrDat(F16x8[adder]);
??LCD_P16x8Ch_1:
        LDR.W    R0,??DataTable18_4
        LDRB     R0,[R6, R0]
        BL       LCD_WrDat
//  981       adder += 1;
        ADDS     R6,R6,#+1
//  982     }
        ADDS     R4,R4,#+1
??LCD_P16x8Ch_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BLT.N    ??LCD_P16x8Ch_1
//  983 }
        POP      {R4-R6,PC}       ;; return
//  984 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  985 void LCD_siping(unsigned char x,unsigned char N)
//  986 {
LCD_siping:
        PUSH     {R4-R8,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  987   unsigned char wm=0,ii = 0;
        MOVS     R8,#+0
        MOVS     R0,#+0
//  988   unsigned char wmm=0;
        MOVS     R7,#+0
//  989   unsigned int adder=0;
        MOVS     R6,#+0
//  990   adder=0;
        MOVS     R1,#+0
        MOVS     R6,R1
//  991   for(wmm = 0;wmm <8;wmm++){
        MOVS     R1,#+0
        MOVS     R7,R1
        B.N      ??LCD_siping_0
??LCD_siping_1:
        ADDS     R7,R7,#+1
??LCD_siping_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BGE.N    ??LCD_siping_2
//  992     LCD_Set_Pos(x,wmm);
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  993     for(wm = 0;wm <N;wm++)
        MOVS     R8,#+0
        B.N      ??LCD_siping_3
//  994     {
//  995         switch(N){
//  996             case 86:LCD_WrDat(buff_86[adder]);break;
//  997             case 114:LCD_WrDat(buff_114[adder]);break;
??LCD_siping_4:
        LDR.W    R0,??DataTable18_5
        LDRB     R0,[R6, R0]
        BL       LCD_WrDat
//  998         }
//  999       adder += 1;
??LCD_siping_5:
        ADDS     R6,R6,#+1
        ADDS     R8,R8,#+1
??LCD_siping_3:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R8,R5
        BCS.N    ??LCD_siping_1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R0,R5
        CMP      R0,#+86
        BEQ.N    ??LCD_siping_6
        CMP      R0,#+114
        BEQ.N    ??LCD_siping_4
        B.N      ??LCD_siping_5
??LCD_siping_6:
        LDR.W    R0,??DataTable18_6
        LDRB     R0,[R6, R0]
        BL       LCD_WrDat
        B.N      ??LCD_siping_5
// 1000     }
// 1001   }
// 1002 }
??LCD_siping_2:
        POP      {R4-R8,PC}       ;; return
// 1003 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1004 void LCD_P128x64Ch(void)
// 1005 {
LCD_P128x64Ch:
        PUSH     {R4-R6,LR}
// 1006   unsigned char wm=0,ii = 0;
        MOVS     R4,#+0
        MOVS     R0,#+0
// 1007   unsigned char wmm=0;
        MOVS     R5,#+0
// 1008   unsigned int adder=0;
        MOVS     R6,#+0
// 1009   for(wmm = 0;wmm <8;wmm++){
        MOVS     R1,#+0
        MOVS     R5,R1
        B.N      ??LCD_P128x64Ch_0
// 1010     LCD_Set_Pos(0,wmm);
// 1011     for(wm = 0;wm <128;wm++)
// 1012     {
// 1013       LCD_WrDat(F128x64[adder]);
??LCD_P128x64Ch_1:
        LDR.W    R0,??DataTable18_7
        LDRB     R0,[R6, R0]
        BL       LCD_WrDat
// 1014       adder += 1;
        ADDS     R6,R6,#+1
// 1015     }
        ADDS     R4,R4,#+1
??LCD_P128x64Ch_2:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+128
        BLT.N    ??LCD_P128x64Ch_1
        ADDS     R5,R5,#+1
??LCD_P128x64Ch_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??LCD_P128x64Ch_3
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
        MOVS     R4,#+0
        B.N      ??LCD_P128x64Ch_2
// 1016   }
// 1017 }
??LCD_P128x64Ch_3:
        POP      {R4-R6,PC}       ;; return
// 1018 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1019 void LCD_P128x64Ch1(void)
// 1020 {
LCD_P128x64Ch1:
        PUSH     {R4-R6,LR}
// 1021   unsigned char wm=0,ii = 0;
        MOVS     R4,#+0
        MOVS     R0,#+0
// 1022   unsigned char wmm=0;
        MOVS     R5,#+0
// 1023   unsigned int adder=0;
        MOVS     R6,#+0
// 1024   for(wmm = 0;wmm <8;wmm++){
        MOVS     R1,#+0
        MOVS     R5,R1
        B.N      ??LCD_P128x64Ch1_0
// 1025     LCD_Set_Pos(0,wmm);
// 1026     for(wm = 0;wm <128;wm++)
// 1027     {
// 1028       LCD_WrDat(F128x641[adder]);
??LCD_P128x64Ch1_1:
        LDR.W    R0,??DataTable18_8
        LDRB     R0,[R6, R0]
        BL       LCD_WrDat
// 1029       adder += 1;
        ADDS     R6,R6,#+1
// 1030     }
        ADDS     R4,R4,#+1
??LCD_P128x64Ch1_2:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+128
        BLT.N    ??LCD_P128x64Ch1_1
        ADDS     R5,R5,#+1
??LCD_P128x64Ch1_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??LCD_P128x64Ch1_3
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
        MOVS     R4,#+0
        B.N      ??LCD_P128x64Ch1_2
// 1031   }
// 1032 }
??LCD_P128x64Ch1_3:
        POP      {R4-R6,PC}       ;; return
// 1033 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1034 void LCD_P8x8Ch(unsigned char x,unsigned char y,unsigned char N)
// 1035 {
LCD_P8x8Ch:
        PUSH     {R4-R6,LR}
// 1036     unsigned char wm=0,ii = 0;
        MOVS     R4,#+0
        MOVS     R5,#+0
// 1037     unsigned int adder=8*N;
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        LSLS     R6,R2,#+3
// 1038     LCD_Set_Pos(x , y);
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1039     for(wm = 0;wm < 8;wm++)
        MOVS     R0,#+0
        MOVS     R4,R0
        B.N      ??LCD_P8x8Ch_0
// 1040     {
// 1041         LCD_WrDat(F8x8[adder]);
??LCD_P8x8Ch_1:
        LDR.N    R0,??DataTable18_9
        LDRB     R0,[R6, R0]
        BL       LCD_WrDat
// 1042         adder += 1;
        ADDS     R6,R6,#+1
// 1043     }
        ADDS     R4,R4,#+1
??LCD_P8x8Ch_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BLT.N    ??LCD_P8x8Ch_1
// 1044 }
        POP      {R4-R6,PC}       ;; return
// 1045 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1046 void MY_LCD(unsigned char y,unsigned int bmp_dat)
// 1047 {
MY_LCD:
        PUSH     {R3-R5,LR}
        MOVS     R4,R1
// 1048       unsigned int i;
// 1049       if(stmp<bmp_dat)
        LDR.N    R1,??DataTable18_10
        LDR      R1,[R1, #+0]
        CMP      R1,R4
        BCS.N    ??MY_LCD_0
// 1050       {
// 1051         LCD_Set_Pos(0,y);
        MOVS     R1,R0
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1052           for(i=0;i<bmp_dat;i++)
        MOVS     R5,#+0
??MY_LCD_1:
        CMP      R5,R4
        BCS.N    ??MY_LCD_2
// 1053           {
// 1054             LCD_WrDat(0xFF);
        MOVS     R0,#+255
        BL       LCD_WrDat
// 1055                   }
        ADDS     R5,R5,#+1
        B.N      ??MY_LCD_1
// 1056       }
// 1057       else if(stmp>bmp_dat)
??MY_LCD_0:
        LDR.N    R1,??DataTable18_10
        LDR      R1,[R1, #+0]
        CMP      R4,R1
        BCS.N    ??MY_LCD_2
// 1058       {
// 1059         LCD_Set_Pos(0,y);
        MOVS     R1,R0
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1060           for(i=0;i<bmp_dat;i++)
        MOVS     R5,#+0
        B.N      ??MY_LCD_3
// 1061           {
// 1062             LCD_WrDat(0xFF);
??MY_LCD_4:
        MOVS     R0,#+255
        BL       LCD_WrDat
// 1063                   }
        ADDS     R5,R5,#+1
??MY_LCD_3:
        CMP      R5,R4
        BCC.N    ??MY_LCD_4
// 1064           for(i=bmp_dat;i<stmp;i++)
        MOVS     R5,R4
        B.N      ??MY_LCD_5
// 1065          {
// 1066             LCD_WrDat(0x00);
??MY_LCD_6:
        MOVS     R0,#+0
        BL       LCD_WrDat
// 1067           }
        ADDS     R5,R5,#+1
??MY_LCD_5:
        LDR.N    R0,??DataTable18_10
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BCC.N    ??MY_LCD_6
// 1068       }
// 1069         stmp=bmp_dat;
??MY_LCD_2:
        LDR.N    R0,??DataTable18_10
        STR      R4,[R0, #+0]
// 1070 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1071 void chess_board()
// 1072 {
chess_board:
        PUSH     {R4-R6,LR}
// 1073   int x = 0;
        MOVS     R4,#+0
// 1074   for(int j = 0;j < 8;j++)
        MOVS     R5,#+0
        B.N      ??chess_board_0
// 1075   {
// 1076     LCD_Set_Pos(x,j);
// 1077     for(int i=0;i<128;i++)
// 1078     {
// 1079       LCD_WrDat(CB[i+128*j]);
??chess_board_1:
        LDR.N    R0,??DataTable18_11
        MOVS     R1,#+128
        MLA      R1,R1,R5,R6
        LDRB     R0,[R1, R0]
        BL       LCD_WrDat
// 1080       LCD_Set_Pos(++x,j);
        ADDS     R4,R4,#+1
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1081     }
        ADDS     R6,R6,#+1
??chess_board_2:
        CMP      R6,#+128
        BLT.N    ??chess_board_1
// 1082     x = 0;
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??chess_board_0:
        CMP      R5,#+8
        BGE.N    ??chess_board_3
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R6,#+0
        B.N      ??chess_board_2
// 1083   }
// 1084 }
??chess_board_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1085 void chess_board1()
// 1086 {
chess_board1:
        PUSH     {R3-R7,LR}
// 1087   int x = 0;
        MOVS     R5,#+0
// 1088   for(int row = 0;row < 8;row++)
        MOVS     R4,#+0
        B.N      ??chess_board1_0
??chess_board1_1:
        ADDS     R4,R4,#+1
??chess_board1_0:
        CMP      R4,#+8
        BGE.N    ??chess_board1_2
// 1089   {
// 1090     x= 0;
        MOVS     R5,#+0
// 1091     LCD_Set_Pos(x,row);
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1092     for(int column = 0; column < 8;column++)
        MOVS     R6,#+0
        B.N      ??chess_board1_3
// 1093     {
// 1094       if(board[row][column] == 0)
// 1095       {
// 1096         for(int i=0;i<8;i++)
// 1097         {
// 1098           LCD_WrDat(CB1[i]);
// 1099         }
// 1100       }
// 1101       else if(board[row][column] == 1)
// 1102       {
// 1103         for(int i=0;i<8;i++)
// 1104         {
// 1105           LCD_WrDat(C1[i]);
// 1106         }
// 1107       }
// 1108       else if(board[row][column] == 2)
// 1109       {
// 1110         for(int i=0;i<8;i++)
// 1111         {
// 1112           LCD_WrDat(C2[i]);
??chess_board1_4:
        LDR.N    R0,??DataTable18_12
        LDRB     R0,[R7, R0]
        BL       LCD_WrDat
// 1113         }
        ADDS     R7,R7,#+1
??chess_board1_5:
        CMP      R7,#+8
        BLT.N    ??chess_board1_4
// 1114       }
// 1115       x += 8;
??chess_board1_6:
        ADDS     R5,R5,#+8
// 1116       LCD_Set_Pos(x,row);
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        ADDS     R6,R6,#+1
??chess_board1_3:
        CMP      R6,#+8
        BGE.N    ??chess_board1_1
        LDR.N    R0,??DataTable18_13
        ADDS     R0,R0,R4, LSL #+3
        LDRB     R0,[R6, R0]
        CMP      R0,#+0
        BNE.N    ??chess_board1_7
        MOVS     R7,#+0
??chess_board1_8:
        CMP      R7,#+8
        BGE.N    ??chess_board1_6
        LDR.N    R0,??DataTable18_14
        LDRB     R0,[R7, R0]
        BL       LCD_WrDat
        ADDS     R7,R7,#+1
        B.N      ??chess_board1_8
??chess_board1_7:
        LDR.N    R0,??DataTable18_13
        ADDS     R0,R0,R4, LSL #+3
        LDRB     R0,[R6, R0]
        CMP      R0,#+1
        BNE.N    ??chess_board1_9
        MOVS     R7,#+0
??chess_board1_10:
        CMP      R7,#+8
        BGE.N    ??chess_board1_6
        LDR.N    R0,??DataTable18_15
        LDRB     R0,[R7, R0]
        BL       LCD_WrDat
        ADDS     R7,R7,#+1
        B.N      ??chess_board1_10
??chess_board1_9:
        LDR.N    R0,??DataTable18_13
        ADDS     R0,R0,R4, LSL #+3
        LDRB     R0,[R6, R0]
        CMP      R0,#+2
        BNE.N    ??chess_board1_6
        MOVS     R7,#+0
        B.N      ??chess_board1_5
// 1117     }
// 1118   }
// 1119 }
??chess_board1_2:
        POP      {R0,R4-R7,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1120 void curCordBlink(void)
// 1121 {
curCordBlink:
        PUSH     {R4,LR}
// 1122     LCD_Set_Pos(codn_x,codn_y);
        LDR.N    R0,??DataTable18_16
        LDRB     R1,[R0, #+0]
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.N    R0,??DataTable18_17
        LDRB     R0,[R0, #+0]
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1123     for(int i=0;i<8;i++)
        MOVS     R4,#+0
        B.N      ??curCordBlink_0
// 1124     {
// 1125       LCD_WrDat(E[i]);
??curCordBlink_1:
        LDR.N    R0,??DataTable18_18
        LDRB     R0,[R4, R0]
        BL       LCD_WrDat
// 1126     }
        ADDS     R4,R4,#+1
??curCordBlink_0:
        CMP      R4,#+8
        BLT.N    ??curCordBlink_1
// 1127 }
        POP      {R4,PC}          ;; return
// 1128 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1129 void LCD_HLFCLS(void)
// 1130 {
LCD_HLFCLS:
        PUSH     {R3-R5,LR}
// 1131     unsigned char y,x;
// 1132     for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??LCD_HLFCLS_0
// 1133     {
// 1134         LCD_WrCmd(0xb0+y);
// 1135         LCD_WrCmd(0x01);
// 1136         LCD_WrCmd(0x10);
// 1137         for(x=64;x<X_WIDTH;x++)
// 1138             LCD_WrDat(0);
??LCD_HLFCLS_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R5,R5,#+1
??LCD_HLFCLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??LCD_HLFCLS_1
        ADDS     R4,R4,#+1
??LCD_HLFCLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??LCD_HLFCLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R5,#+64
        B.N      ??LCD_HLFCLS_2
// 1139     }
// 1140 }
??LCD_HLFCLS_3:
        POP      {R0,R4,R5,PC}    ;; return
// 1141 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1142 void LCD_tuxing(unsigned char x,unsigned char y,unsigned char N)
// 1143 {
LCD_tuxing:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1144     unsigned char wm=0,ii = 0;
        MOVS     R7,#+0
        MOVS     R9,#+0
// 1145     unsigned int adder=46*N;
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+46
        MUL      R8,R0,R6
// 1146     LCD_Set_Pos(x , y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1147     for(wm = 0;wm < 23;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
        B.N      ??LCD_tuxing_0
// 1148     {
// 1149         if(N%2)
// 1150         LCD_WrDat(tuxing[adder]);
// 1151         else
// 1152         LCD_WrDat(~tuxing[adder]);
??LCD_tuxing_1:
        LDR.N    R0,??DataTable18_19
        LDRB     R0,[R8, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
// 1153         adder += 1;
??LCD_tuxing_2:
        ADDS     R8,R8,#+1
        ADDS     R7,R7,#+1
??LCD_tuxing_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+23
        BGE.N    ??LCD_tuxing_3
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+2
        SDIV     R1,R6,R0
        MLS      R1,R1,R0,R6
        CMP      R1,#+0
        BEQ.N    ??LCD_tuxing_1
        LDR.N    R0,??DataTable18_19
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
        B.N      ??LCD_tuxing_2
// 1154     }
// 1155     LCD_Set_Pos(x,y + 1);
??LCD_tuxing_3:
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1156     for(wm = 0;wm < 23;wm++)
        MOVS     R7,#+0
        B.N      ??LCD_tuxing_4
// 1157     {
// 1158         if(N%2)
// 1159         LCD_WrDat(tuxing[adder]);
// 1160         else
// 1161         LCD_WrDat(~tuxing[adder]);
??LCD_tuxing_5:
        LDR.N    R0,??DataTable18_19
        LDRB     R0,[R8, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
// 1162         adder += 1;
??LCD_tuxing_6:
        ADDS     R8,R8,#+1
        ADDS     R7,R7,#+1
??LCD_tuxing_4:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+23
        BGE.N    ??LCD_tuxing_7
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+2
        SDIV     R1,R6,R0
        MLS      R1,R1,R0,R6
        CMP      R1,#+0
        BEQ.N    ??LCD_tuxing_5
        LDR.N    R0,??DataTable18_19
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
        B.N      ??LCD_tuxing_6
// 1163     }
// 1164 }
??LCD_tuxing_7:
        POP      {R0,R4-R9,PC}    ;; return
// 1165 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1166 void LCD_tuxing1(unsigned char x,unsigned char y,unsigned char N)
// 1167 {
LCD_tuxing1:
        PUSH     {R4-R6,LR}
        MOVS     R4,R2
// 1168     unsigned char wm=0,ii = 0;
        MOVS     R5,#+0
        MOVS     R6,#+0
// 1169     unsigned int adder;
// 1170     adder=1*N;
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
// 1171     LCD_Set_Pos(x , y);
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1172         for(wm = 0;wm < 1;wm++){
        MOVS     R0,#+0
        MOVS     R5,R0
        B.N      ??LCD_tuxing1_0
// 1173             LCD_WrDat(tuxing1[adder]);
??LCD_tuxing1_1:
        LDR.N    R0,??DataTable18_20
        LDRB     R0,[R4, R0]
        BL       LCD_WrDat
// 1174             adder += 1;}
        ADDS     R4,R4,#+1
        ADDS     R5,R5,#+1
??LCD_tuxing1_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+0
        BEQ.N    ??LCD_tuxing1_1
// 1175 }
        POP      {R4-R6,PC}       ;; return
// 1176 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1177 void LCD_tuxing2(unsigned char x,unsigned char y,unsigned char N)
// 1178 {
LCD_tuxing2:
        PUSH     {R4-R8,LR}
        MOVS     R4,R0
        MOVS     R5,R1
// 1179     unsigned char wm=0,ii = 0;
        MOVS     R6,#+0
        MOVS     R8,#+0
// 1180     unsigned int adder;
// 1181     adder=128*N;
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R0,#+128
        MUL      R7,R0,R2
// 1182     LCD_Set_Pos(x , y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1183         for(wm = 0;wm < 32;wm++){
        MOVS     R0,#+0
        MOVS     R6,R0
        B.N      ??LCD_tuxing2_0
// 1184             LCD_WrDat(tuxing2[adder]);
??LCD_tuxing2_1:
        LDR.N    R0,??DataTable18_21
        LDRB     R0,[R7, R0]
        BL       LCD_WrDat
// 1185             adder += 1;}
        ADDS     R7,R7,#+1
        ADDS     R6,R6,#+1
??LCD_tuxing2_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+32
        BLT.N    ??LCD_tuxing2_1
// 1186             LCD_Set_Pos(x , y+1);
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1187         for(wm = 0;wm < 32;wm++){
        MOVS     R6,#+0
        B.N      ??LCD_tuxing2_2
// 1188             LCD_WrDat(tuxing2[adder]);
??LCD_tuxing2_3:
        LDR.N    R0,??DataTable18_21
        LDRB     R0,[R7, R0]
        BL       LCD_WrDat
// 1189             adder += 1;}
        ADDS     R7,R7,#+1
        ADDS     R6,R6,#+1
??LCD_tuxing2_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+32
        BLT.N    ??LCD_tuxing2_3
// 1190             LCD_Set_Pos(x , y+2);
        ADDS     R1,R5,#+2
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1191         for(wm = 0;wm < 32;wm++){
        MOVS     R6,#+0
        B.N      ??LCD_tuxing2_4
// 1192             LCD_WrDat(tuxing2[adder]);
??LCD_tuxing2_5:
        LDR.N    R0,??DataTable18_21
        LDRB     R0,[R7, R0]
        BL       LCD_WrDat
// 1193             adder += 1;}
        ADDS     R7,R7,#+1
        ADDS     R6,R6,#+1
??LCD_tuxing2_4:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+32
        BLT.N    ??LCD_tuxing2_5
// 1194             LCD_Set_Pos(x , y+3);
        ADDS     R1,R5,#+3
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
// 1195         for(wm = 0;wm < 32;wm++){
        MOVS     R6,#+0
        B.N      ??LCD_tuxing2_6
// 1196             LCD_WrDat(tuxing2[adder]);
??LCD_tuxing2_7:
        LDR.N    R0,??DataTable18_21
        LDRB     R0,[R7, R0]
        BL       LCD_WrDat
// 1197             adder += 1;}
        ADDS     R7,R7,#+1
        ADDS     R6,R6,#+1
??LCD_tuxing2_6:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+32
        BLT.N    ??LCD_tuxing2_7
// 1198 }
        POP      {R4-R8,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18:
        DC32     0x400ff0c0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_1:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_2:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_3:
        DC32     F14x16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_4:
        DC32     F16x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_5:
        DC32     buff_114

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_6:
        DC32     buff_86

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_7:
        DC32     F128x64

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_8:
        DC32     F128x641

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_9:
        DC32     F8x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_10:
        DC32     stmp

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_11:
        DC32     CB

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_12:
        DC32     `C2`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_13:
        DC32     board

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_14:
        DC32     CB1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_15:
        DC32     `C1`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_16:
        DC32     codn_y

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_17:
        DC32     codn_x

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_18:
        DC32     E

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_19:
        DC32     tuxing

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_20:
        DC32     tuxing1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable18_21:
        DC32     tuxing2

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 
//    70 bytes in section .bss
// 8 320 bytes in section .rodata
// 2 304 bytes in section .text
// 
// 2 304 bytes of CODE  memory
// 8 320 bytes of CONST memory
//    70 bytes of DATA  memory
//
//Errors: none
//Warnings: 11

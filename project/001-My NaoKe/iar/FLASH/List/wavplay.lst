###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        11/Mar/2019  10:13:07
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\2019.IAR\project\001-My NaoKe\app\wavplay.c
#    Command line =  
#        "D:\2019.IAR\project\001-My NaoKe\app\wavplay.c" -D LPLD_K60 -lCN
#        "D:\2019.IAR\project\001-My NaoKe\iar\FLASH\List\" -lB
#        "D:\2019.IAR\project\001-My NaoKe\iar\FLASH\List\" -o
#        "D:\2019.IAR\project\001-My NaoKe\iar\FLASH\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "D:\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\app\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\CPU\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\common\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\LPLD\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\LPLD\HW\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\LPLD\DEV\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\FatFs\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\FatFs\option\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\common\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\driver\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\descriptor\" -I
#        "D:\2019.IAR\project\001-My NaoKe\iar\..\..\..\lib\USB\class\" -Ol -I
#        "D:\Embedded Workbench 7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\2019.IAR\project\001-My NaoKe\iar\FLASH\List\wavplay.lst
#    Object file  =  D:\2019.IAR\project\001-My NaoKe\iar\FLASH\Obj\wavplay.o
#
###############################################################################

D:\2019.IAR\project\001-My NaoKe\app\wavplay.c
      1          #include "wavplay.h"
      2          #include "yingjian.h"
      3          #include "common.h"
      4          

   \                                 In section .bss, align 4
      5          PIT_InitTypeDef pit2_init_struct;
   \                     pit2_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      6          WAV_file wav1;//wav文件
   \                     wav1:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
      7          uint8 wav_buf[1024];
   \                     wav_buf:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 2
      8          uint16 DApc;
   \                     DApc:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
      9          uint8 CHanalnum;
   \                     CHanalnum:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     10          uint8 Bitnum;
   \                     Bitnum:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     11          uint8 DACdone;
   \                     DACdone:
   \   00000000                      DS8 1
     12          extern uint8 volume;
     13          extern FRESULT rc;     //结果代码 
     14          extern FATFS fatfs,*fs;      // 文件系统对象 
     15          extern FIL fil;      // 文件对象 
     16          extern UINT bw, br;
     17          

   \                                 In section .text, align 2, keep-with-next
     18          void pit_time2(void){
   \                     pit_time2: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     19          	uint16 temp;
     20                if(Bitnum==8)//8位精度
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2808             CMP      R0,#+8
   \   00000008   0xD114             BNE.N    ??pit_time2_0
     21                {
     22                  //DAC->DHR12R1=wav_buf[DApc]*10/volume;//通道1的12位右对齐数据
     23                  LPLD_DAC_SetBufferDataN(DAC0,wav_buf[DApc]*10/volume,1);
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x....             LDR.N    R0,??DataTable2_1
   \   0000000E   0x....             LDR.N    R1,??DataTable2_2
   \   00000010   0x8809             LDRH     R1,[R1, #+0]
   \   00000012   0x5C08             LDRB     R0,[R1, R0]
   \   00000014   0x210A             MOVS     R1,#+10
   \   00000016   0x4348             MULS     R0,R1,R0
   \   00000018   0x....             LDR.N    R1,??DataTable2_3
   \   0000001A   0x7809             LDRB     R1,[R1, #+0]
   \   0000001C   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x....             LDR.N    R0,??DataTable2_4  ;; 0x400cc000
   \   00000024   0x.... 0x....      BL       LPLD_DAC_SetBufferDataN
     24                  DApc++;
   \   00000028   0x....             LDR.N    R0,??DataTable2_2
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x....             LDR.N    R1,??DataTable2_2
   \   00000030   0x8008             STRH     R0,[R1, #+0]
   \   00000032   0xE023             B.N      ??pit_time2_1
     25                }
     26                else if(Bitnum==16)//16位精度(先低位后高位)
   \                     ??pit_time2_0: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable2
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x2810             CMP      R0,#+16
   \   0000003A   0xD11F             BNE.N    ??pit_time2_1
     27                {
     28                  temp=(((uint8)(wav_buf[DApc+1]-0x80)<<4)|(wav_buf[DApc]>>4))*10/volume;
   \   0000003C   0x....             LDR.N    R0,??DataTable2_1
   \   0000003E   0x....             LDR.N    R1,??DataTable2_2
   \   00000040   0x8809             LDRH     R1,[R1, #+0]
   \   00000042   0x1808             ADDS     R0,R1,R0
   \   00000044   0x7840             LDRB     R0,[R0, #+1]
   \   00000046   0x3880             SUBS     R0,R0,#+128
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x....             LDR.N    R1,??DataTable2_1
   \   0000004C   0x....             LDR.N    R2,??DataTable2_2
   \   0000004E   0x8812             LDRH     R2,[R2, #+0]
   \   00000050   0x5C51             LDRB     R1,[R2, R1]
   \   00000052   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000054   0x0909             LSRS     R1,R1,#+4
   \   00000056   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000058   0xEA51 0x1000      ORRS     R0,R1,R0, LSL #+4
   \   0000005C   0x210A             MOVS     R1,#+10
   \   0000005E   0x4348             MULS     R0,R1,R0
   \   00000060   0x....             LDR.N    R1,??DataTable2_3
   \   00000062   0x7809             LDRB     R1,[R1, #+0]
   \   00000064   0xFB90 0xF1F1      SDIV     R1,R0,R1
     29                  LPLD_DAC_SetBufferDataN(DAC0,temp,1);
   \   00000068   0x2201             MOVS     R2,#+1
   \   0000006A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006C   0x....             LDR.N    R0,??DataTable2_4  ;; 0x400cc000
   \   0000006E   0x.... 0x....      BL       LPLD_DAC_SetBufferDataN
     30                  DApc+=2;        
   \   00000072   0x....             LDR.N    R0,??DataTable2_2
   \   00000074   0x8800             LDRH     R0,[R0, #+0]
   \   00000076   0x1C80             ADDS     R0,R0,#+2
   \   00000078   0x....             LDR.N    R1,??DataTable2_2
   \   0000007A   0x8008             STRH     R0,[R1, #+0]
     31                } 
     32              if(DApc==512)DACdone=1;
   \                     ??pit_time2_1: (+1)
   \   0000007C   0x....             LDR.N    R0,??DataTable2_2
   \   0000007E   0x8800             LDRH     R0,[R0, #+0]
   \   00000080   0xF5B0 0x7F00      CMP      R0,#+512
   \   00000084   0xD102             BNE.N    ??pit_time2_2
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x....             LDR.N    R1,??DataTable2_5
   \   0000008A   0x7008             STRB     R0,[R1, #+0]
     33              if(DApc==1024){DApc=0;DACdone=1;}                                         
   \                     ??pit_time2_2: (+1)
   \   0000008C   0x....             LDR.N    R0,??DataTable2_2
   \   0000008E   0x8800             LDRH     R0,[R0, #+0]
   \   00000090   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000094   0xD105             BNE.N    ??pit_time2_3
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x....             LDR.N    R1,??DataTable2_2
   \   0000009A   0x8008             STRH     R0,[R1, #+0]
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x....             LDR.N    R1,??DataTable2_5
   \   000000A0   0x7008             STRB     R0,[R1, #+0]
     34          }
   \                     ??pit_time2_3: (+1)
   \   000000A2   0xBD01             POP      {R0,PC}          ;; return
     35          

   \                                 In section .text, align 2, keep-with-next
     36          uint8 WAV_Init(uint8* pbuf)//初始化并显示文件信息
     37          {
   \                     WAV_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     38          	if(Check_Ifo(pbuf,"RIFF"))return 1;//RIFF标志错误
   \   00000004   0x....             LDR.N    R1,??DataTable2_6
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       Check_Ifo
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD001             BEQ.N    ??WAV_Init_0
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE05A             B.N      ??WAV_Init_1
     39          	wav1.wavlen=Get_num(pbuf+4,4);//文件长度，数据偏移4byte
   \                     ??WAV_Init_0: (+1)
   \   00000014   0x2104             MOVS     R1,#+4
   \   00000016   0x1D20             ADDS     R0,R4,#+4
   \   00000018   0x.... 0x....      BL       Get_num
   \   0000001C   0x....             LDR.N    R1,??DataTable2_7
   \   0000001E   0x6048             STR      R0,[R1, #+4]
     40          	if(Check_Ifo(pbuf+8,"WAVE"))return 2;//WAVE标志错误
   \   00000020   0x....             LDR.N    R1,??DataTable2_8
   \   00000022   0xF114 0x0008      ADDS     R0,R4,#+8
   \   00000026   0x.... 0x....      BL       Check_Ifo
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD001             BEQ.N    ??WAV_Init_2
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0xE04B             B.N      ??WAV_Init_1
     41          	if(Check_Ifo(pbuf+12,"fmt "))return 3;//fmt标志错误
   \                     ??WAV_Init_2: (+1)
   \   00000032   0x....             LDR.N    R1,??DataTable2_9
   \   00000034   0xF114 0x000C      ADDS     R0,R4,#+12
   \   00000038   0x.... 0x....      BL       Check_Ifo
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD001             BEQ.N    ??WAV_Init_3
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0xE042             B.N      ??WAV_Init_1
     42          	wav1.formart=Get_num(pbuf+20,2);//格式类别
   \                     ??WAV_Init_3: (+1)
   \   00000044   0x2102             MOVS     R1,#+2
   \   00000046   0xF114 0x0014      ADDS     R0,R4,#+20
   \   0000004A   0x.... 0x....      BL       Get_num
   \   0000004E   0x....             LDR.N    R1,??DataTable2_7
   \   00000050   0x8208             STRH     R0,[R1, #+16]
     43          	wav1.CHnum=Get_num(pbuf+22,2);//通道数
   \   00000052   0x2102             MOVS     R1,#+2
   \   00000054   0xF114 0x0016      ADDS     R0,R4,#+22
   \   00000058   0x.... 0x....      BL       Get_num
   \   0000005C   0x....             LDR.N    R1,??DataTable2_7
   \   0000005E   0x8248             STRH     R0,[R1, #+18]
     44          	CHanalnum=wav1.CHnum;
   \   00000060   0x....             LDR.N    R0,??DataTable2_7
   \   00000062   0x8A40             LDRH     R0,[R0, #+18]
   \   00000064   0x....             LDR.N    R1,??DataTable2_10
   \   00000066   0x7008             STRB     R0,[R1, #+0]
     45          	wav1.SampleRate=Get_num(pbuf+24,4);//采样率
   \   00000068   0x2104             MOVS     R1,#+4
   \   0000006A   0xF114 0x0018      ADDS     R0,R4,#+24
   \   0000006E   0x.... 0x....      BL       Get_num
   \   00000072   0x....             LDR.N    R1,??DataTable2_7
   \   00000074   0x6148             STR      R0,[R1, #+20]
     46          	wav1.speed=Get_num(pbuf+28,4);//音频传送速率
   \   00000076   0x2104             MOVS     R1,#+4
   \   00000078   0xF114 0x001C      ADDS     R0,R4,#+28
   \   0000007C   0x.... 0x....      BL       Get_num
   \   00000080   0x....             LDR.N    R1,??DataTable2_7
   \   00000082   0x6188             STR      R0,[R1, #+24]
     47          	wav1.ajust=Get_num(pbuf+32,2);//数据块调速数
   \   00000084   0x2102             MOVS     R1,#+2
   \   00000086   0xF114 0x0020      ADDS     R0,R4,#+32
   \   0000008A   0x.... 0x....      BL       Get_num
   \   0000008E   0x....             LDR.N    R1,??DataTable2_7
   \   00000090   0x8388             STRH     R0,[R1, #+28]
     48          	wav1.SampleBits=Get_num(pbuf+34,2);//样本数据位数
   \   00000092   0x2102             MOVS     R1,#+2
   \   00000094   0xF114 0x0022      ADDS     R0,R4,#+34
   \   00000098   0x.... 0x....      BL       Get_num
   \   0000009C   0x....             LDR.N    R1,??DataTable2_7
   \   0000009E   0x83C8             STRH     R0,[R1, #+30]
     49          	Bitnum=wav1.SampleBits;
   \   000000A0   0x....             LDR.N    R0,??DataTable2_7
   \   000000A2   0x8BC0             LDRH     R0,[R0, #+30]
   \   000000A4   0x....             LDR.N    R1,??DataTable2
   \   000000A6   0x7008             STRB     R0,[R1, #+0]
     50          	if(Check_Ifo(pbuf+36,"data"))return 4;//data标志错误
   \   000000A8   0x....             LDR.N    R1,??DataTable2_11
   \   000000AA   0xF114 0x0024      ADDS     R0,R4,#+36
   \   000000AE   0x.... 0x....      BL       Check_Ifo
   \   000000B2   0x2800             CMP      R0,#+0
   \   000000B4   0xD001             BEQ.N    ??WAV_Init_4
   \   000000B6   0x2004             MOVS     R0,#+4
   \   000000B8   0xE007             B.N      ??WAV_Init_1
     51          	wav1.DATAlen=Get_num(pbuf+40,4);//数据长度	
   \                     ??WAV_Init_4: (+1)
   \   000000BA   0x2104             MOVS     R1,#+4
   \   000000BC   0xF114 0x0028      ADDS     R0,R4,#+40
   \   000000C0   0x.... 0x....      BL       Get_num
   \   000000C4   0x....             LDR.N    R1,??DataTable2_7
   \   000000C6   0x6248             STR      R0,[R1, #+36]
     52          	///////////////////////////////////////////////
     53          	/*if(wav1.wavlen<0x100000)
     54          	{
     55          		LCD_ShowNum(170,30,(wav1.wavlen)>>10,3,16);//文件长度
     56          		LCD_ShowString(200,30,"Kb");
     57          	}
     58          	else
     59          	{
     60          		LCD_ShowNum(170,30,(wav1.wavlen)>>20,3,16);//文件长度
     61          		LCD_ShowString(200,30,"Mb");
     62          	}
     63          	if(wav1.formart==1)LCD_ShowString(170,50,"WAV PCM");
     64          	if(wav1.CHnum==1)LCD_ShowString(170,70,"single");
     65          	else LCD_ShowString(170,70,"stereo");
     66          	LCD_ShowNum(170,90,(wav1.SampleRate)/1000,3,16);//采样率
     67          	LCD_ShowString(200,90,"KHz");
     68          	LCD_ShowNum(170,110,(wav1.speed)/1000,3,16);//传送速度
     69          	LCD_ShowString(200,110,"bps");
     70          	LCD_ShowNum(177,130,wav1.SampleBits,2,16);//样本数据位数
     71          	LCD_ShowString(200,130,"bit");*/
     72          	return 0;
   \   000000C8   0x2000             MOVS     R0,#+0
   \                     ??WAV_Init_1: (+1)
   \   000000CA   0xBD10             POP      {R4,PC}          ;; return
     73          }
     74          

   \                                 In section .text, align 2, keep-with-next
     75          uint8 Playwav(uint8 qumu)
     76          {
   \                     Playwav: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     77          	uint16 i,times;
     78          	/*F_Open(CurFile);
     79          	F_Read(CurFile,wav_buf);//先读512字节到
     80          	F_Read(CurFile,wav_buf+512);//再读512字节*/
     81          
     82          	f_open(&fil, "0:/music/test.wav", FA_READ);
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x....             LDR.N    R1,??DataTable2_12
   \   00000006   0x....             LDR.N    R0,??DataTable2_13
   \   00000008   0x.... 0x....      BL       f_open
     83          	f_read(&fil,wav_buf,512,&br);
   \   0000000C   0x....             LDR.N    R3,??DataTable2_14
   \   0000000E   0xF44F 0x7200      MOV      R2,#+512
   \   00000012   0x....             LDR.N    R1,??DataTable2_1
   \   00000014   0x....             LDR.N    R0,??DataTable2_13
   \   00000016   0x.... 0x....      BL       f_read
     84          	f_read(&fil,wav_buf+512,512,&br);
   \   0000001A   0x....             LDR.N    R3,??DataTable2_14
   \   0000001C   0xF44F 0x7200      MOV      R2,#+512
   \   00000020   0x....             LDR.N    R1,??DataTable2_15
   \   00000022   0x....             LDR.N    R0,??DataTable2_13
   \   00000024   0x.... 0x....      BL       f_read
     85          
     86          	while(WAV_Init(wav_buf));
   \                     ??Playwav_0: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable2_1
   \   0000002A   0x.... 0x....      BL       WAV_Init
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD1FA             BNE.N    ??Playwav_0
     87          	//LCD_ShowString(35,70,"format illegal!");
     88          	//根据采样率（wav1.SampleRate）设置定时器，在中断中进行DA转换
     89          	DACdone=0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable2_5
   \   00000036   0x7008             STRB     R0,[R1, #+0]
     90          	DApc=44;//DA转换地址(跳过头信息)
   \   00000038   0x202C             MOVS     R0,#+44
   \   0000003A   0x....             LDR.N    R1,??DataTable2_2
   \   0000003C   0x8008             STRH     R0,[R1, #+0]
     91          	//LCD_DrawRectangle(18,258,222,272);//进度框
     92          	//LCD_Fill(20,260,220,270,WHITE);//进度条
     93          	pit2_init_struct.PIT_Pitx = PIT2;
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x....             LDR.N    R1,??DataTable2_16
   \   00000042   0x7008             STRB     R0,[R1, #+0]
     94            	pit2_init_struct.PIT_PeriodUs =1000000/wav1.SampleRate; //定时周期
   \   00000044   0x....             LDR.N    R0,??DataTable2_17  ;; 0xf4240
   \   00000046   0x....             LDR.N    R1,??DataTable2_7
   \   00000048   0x6949             LDR      R1,[R1, #+20]
   \   0000004A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000004E   0x....             LDR.N    R1,??DataTable2_16
   \   00000050   0x6048             STR      R0,[R1, #+4]
     95            	pit2_init_struct.PIT_Isr = pit_time2;  //设置中断函数
   \   00000052   0x....             LDR.N    R0,??DataTable2_18
   \   00000054   0x....             LDR.N    R1,??DataTable2_16
   \   00000056   0x6108             STR      R0,[R1, #+16]
     96            	LPLD_PIT_Init(pit2_init_struct);//初始化PIT2 
   \   00000058   0x....             LDR.N    R1,??DataTable2_16
   \   0000005A   0xB084             SUB      SP,SP,#+16
   \   0000005C   0x4668             MOV      R0,SP
   \   0000005E   0x2214             MOVS     R2,#+20
   \   00000060   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000064   0xBC0F             POP      {R0-R3}
   \   00000066   0x.... 0x....      BL       LPLD_PIT_Init
     97            	LPLD_PIT_EnableIrq(pit2_init_struct);
   \   0000006A   0x....             LDR.N    R1,??DataTable2_16
   \   0000006C   0xB084             SUB      SP,SP,#+16
   \   0000006E   0x4668             MOV      R0,SP
   \   00000070   0x2214             MOVS     R2,#+20
   \   00000072   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000076   0xBC0F             POP      {R0-R3}
   \   00000078   0x.... 0x....      BL       LPLD_PIT_EnableIrq
     98          	//Timerx_Init(1000000/wav1.SampleRate,72);//1MHz的计数频率,产生和采样率一样的中断频率
     99          	times=(wav1.DATAlen>>10)-1;
   \   0000007C   0x....             LDR.N    R0,??DataTable2_7
   \   0000007E   0x6A40             LDR      R0,[R0, #+36]
   \   00000080   0x0A80             LSRS     R0,R0,#+10
   \   00000082   0x1E44             SUBS     R4,R0,#+1
    100          	for(i=0;i<times;i++)//循环一次转换1KB数据
   \   00000084   0x2500             MOVS     R5,#+0
   \   00000086   0xE01C             B.N      ??Playwav_1
    101          	{	
    102          		while(!DACdone);//等待前面512字节转换完成
   \                     ??Playwav_2: (+1)
   \   00000088   0x....             LDR.N    R0,??DataTable2_5
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD0FB             BEQ.N    ??Playwav_2
    103          		DACdone=0;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x....             LDR.N    R1,??DataTable2_5
   \   00000094   0x7008             STRB     R0,[R1, #+0]
    104          		//F_Read(CurFile,wav_buf);//读512字节
    105          		f_read(&fil,wav_buf,512,&br);
   \   00000096   0x....             LDR.N    R3,??DataTable2_14
   \   00000098   0xF44F 0x7200      MOV      R2,#+512
   \   0000009C   0x....             LDR.N    R1,??DataTable2_1
   \   0000009E   0x....             LDR.N    R0,??DataTable2_13
   \   000000A0   0x.... 0x....      BL       f_read
    106          		//LCD_Fill(20,260,20+(200*i/times),270,BLUE);//进度条
    107          		while(!DACdone);//等待前面512字节转换完成
   \                     ??Playwav_3: (+1)
   \   000000A4   0x....             LDR.N    R0,??DataTable2_5
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD0FB             BEQ.N    ??Playwav_3
    108          		DACdone=0;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x....             LDR.N    R1,??DataTable2_5
   \   000000B0   0x7008             STRB     R0,[R1, #+0]
    109          		//F_Read(CurFile,wav_buf+512);//读512字节
    110          		f_read(&fil,wav_buf+512,512,&br);	
   \   000000B2   0x....             LDR.N    R3,??DataTable2_14
   \   000000B4   0xF44F 0x7200      MOV      R2,#+512
   \   000000B8   0x....             LDR.N    R1,??DataTable2_15
   \   000000BA   0x....             LDR.N    R0,??DataTable2_13
   \   000000BC   0x.... 0x....      BL       f_read
    111          	}
   \   000000C0   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Playwav_1: (+1)
   \   000000C2   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000C4   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000C6   0x42A5             CMP      R5,R4
   \   000000C8   0xD3DE             BCC.N    ??Playwav_2
    112          	LPLD_PIT_Deinit(pit2_init_struct);
   \   000000CA   0x....             LDR.N    R1,??DataTable2_16
   \   000000CC   0xB084             SUB      SP,SP,#+16
   \   000000CE   0x4668             MOV      R0,SP
   \   000000D0   0x2214             MOVS     R2,#+20
   \   000000D2   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000D6   0xBC0F             POP      {R0-R3}
   \   000000D8   0x.... 0x....      BL       LPLD_PIT_Deinit
    113          	rc = f_close(&fil);
   \   000000DC   0x....             LDR.N    R0,??DataTable2_13
   \   000000DE   0x.... 0x....      BL       f_close
   \   000000E2   0x....             LDR.N    R1,??DataTable2_19
   \   000000E4   0x7008             STRB     R0,[R1, #+0]
    114              if (rc) die(rc);
   \   000000E6   0x....             LDR.N    R0,??DataTable2_19
   \   000000E8   0x7800             LDRB     R0,[R0, #+0]
   \   000000EA   0x2800             CMP      R0,#+0
   \   000000EC   0xD003             BEQ.N    ??Playwav_4
   \   000000EE   0x....             LDR.N    R0,??DataTable2_19
   \   000000F0   0x7800             LDRB     R0,[R0, #+0]
   \   000000F2   0x.... 0x....      BL       die
    115              //printf("\n解除挂载.\n");
    116              f_mount(0,NULL);
   \                     ??Playwav_4: (+1)
   \   000000F6   0x2100             MOVS     R1,#+0
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x.... 0x....      BL       f_mount
    117          	return 0;
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    118          }
    119          

   \                                 In section .text, align 2, keep-with-next
    120          uint8 Check_Ifo(uint8* pbuf1,uint8* pbuf2)
    121          {
   \                     Check_Ifo: (+1)
   \   00000000   0xB410             PUSH     {R4}
    122          	uint8 i;
    123          	for(i=0;i<4;i++)if(pbuf1[i]!=pbuf2[i])return 1;//不同
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xE000             B.N      ??Check_Ifo_0
   \                     ??Check_Ifo_1: (+1)
   \   00000006   0x1C52             ADDS     R2,R2,#+1
   \                     ??Check_Ifo_0: (+1)
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x2A04             CMP      R2,#+4
   \   0000000C   0xDA07             BGE.N    ??Check_Ifo_2
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x5C13             LDRB     R3,[R2, R0]
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x5C54             LDRB     R4,[R2, R1]
   \   00000016   0x42A3             CMP      R3,R4
   \   00000018   0xD0F5             BEQ.N    ??Check_Ifo_1
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xE000             B.N      ??Check_Ifo_3
    124          	return 0;//相同
   \                     ??Check_Ifo_2: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \                     ??Check_Ifo_3: (+1)
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    125          }
    126          

   \                                 In section .text, align 2, keep-with-next
    127          uint32 Get_num(uint8* pbuf,uint8 len)
    128          {
    129              uint32 num;
    130          	if(len==2)num=(pbuf[1]<<8)|pbuf[0];
   \                     Get_num: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2902             CMP      R1,#+2
   \   00000004   0xD104             BNE.N    ??Get_num_0
   \   00000006   0x7841             LDRB     R1,[R0, #+1]
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0xEA50 0x2201      ORRS     R2,R0,R1, LSL #+8
   \   0000000E   0xE00D             B.N      ??Get_num_1
    131          	else if(len==4)num=(pbuf[3]<<24)|(pbuf[2]<<16)|(pbuf[1]<<8)|pbuf[0];
   \                     ??Get_num_0: (+1)
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x2904             CMP      R1,#+4
   \   00000014   0xD10A             BNE.N    ??Get_num_1
   \   00000016   0x78C1             LDRB     R1,[R0, #+3]
   \   00000018   0x7882             LDRB     R2,[R0, #+2]
   \   0000001A   0x0412             LSLS     R2,R2,#+16
   \   0000001C   0xEA52 0x6101      ORRS     R1,R2,R1, LSL #+24
   \   00000020   0x7842             LDRB     R2,[R0, #+1]
   \   00000022   0xEA51 0x2102      ORRS     R1,R1,R2, LSL #+8
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0xEA50 0x0201      ORRS     R2,R0,R1
    132          	return num;
   \                     ??Get_num_1: (+1)
   \   0000002C   0x0010             MOVS     R0,R2
   \   0000002E   0x4770             BX       LR               ;; return
    133          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     Bitnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     wav_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     DApc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x400CC000         DC32     0x400cc000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     DACdone

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     wav1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     CHanalnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     fil

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     br

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x........         DC32     wav_buf+0x200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     pit2_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     pit_time2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x........         DC32     rc

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x52 0x49          DC8 "RIFF"
   \              0x46 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x57 0x41          DC8 "WAVE"
   \              0x56 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x66 0x6D          DC8 "fmt "
   \              0x74 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x64 0x61          DC8 "data"
   \              0x74 0x61    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x30 0x3A          DC8 "0:/music/test.wav"
   \              0x2F 0x6D    
   \              0x75 0x73    
   \              0x69 0x63    
   \              0x2F 0x74    
   \              0x65 0x73    
   \              0x74 0x2E    
   \              0x77 0x61    
   \              0x76 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   Check_Ifo
       0   Get_num
      32   Playwav
        16   -> LPLD_PIT_Deinit
        16   -> LPLD_PIT_EnableIrq
        16   -> LPLD_PIT_Init
        16   -> WAV_Init
        32   -> __aeabi_memcpy4
        16   -> die
        16   -> f_close
        16   -> f_mount
        16   -> f_open
        16   -> f_read
       8   WAV_Init
         8   -> Check_Ifo
         8   -> Get_num
       8   pit_time2
         8   -> LPLD_DAC_SetBufferDataN


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       8  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
      20  ?_4
       1  Bitnum
       1  CHanalnum
      36  Check_Ifo
       1  DACdone
       2  DApc
      48  Get_num
     258  Playwav
     204  WAV_Init
      20  pit2_init_struct
     164  pit_time2
      40  wav1
    1024  wav_buf

 
 1 089 bytes in section .bss
    52 bytes in section .rodata
   790 bytes in section .text
 
   790 bytes of CODE  memory
    52 bytes of CONST memory
 1 089 bytes of DATA  memory

Errors: none
Warnings: 2
